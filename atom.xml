<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十四心</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行。    -小码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.lushunde.com/"/>
  <updated>2018-07-07T18:30:19.334Z</updated>
  <id>http://github.lushunde.com/</id>
  
  <author>
    <name>鲁顺德</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDK各版本新特性介绍</title>
    <link href="http://github.lushunde.com/2018/07/08/JDK%E5%90%84%E7%89%88%E6%9C%AC%E7%9A%84%E7%89%B9%E6%96%B0/"/>
    <id>http://github.lushunde.com/2018/07/08/JDK各版本的特新/</id>
    <published>2018-07-07T16:48:20.000Z</published>
    <updated>2018-07-07T18:30:19.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK-1-0"><a href="#JDK-1-0" class="headerlink" title="JDK 1.0"></a>JDK 1.0</h1><p>开发代号为Oak（橡树），于1996-01-23发行。</p><h1 id="JDK-1-1"><a href="#JDK-1-1" class="headerlink" title="JDK 1.1"></a>JDK 1.1</h1><p>于1997-02-19发行。<br><strong>引入的新特性包括：</strong><br>引入JDBC（Java Database Connectivity）；<br>支持内部类；<br>引入Java Bean；<br>引入RMI（Remote Method Invocation）；<br>引入反射（仅用于内省）。</p><h1 id="JDK-1-2"><a href="#JDK-1-2" class="headerlink" title="JDK 1.2"></a>JDK 1.2</h1><p>开发代号为Playground（操场），于1998-12-08发行。<br><strong>引入的新特性包括：</strong><br>引入集合（Collection）框架；<br>对字符串常量做内存映射；<br>引入JIT（Just In Time）编译器；<br>引入对打包的Java文件进行数字签名；<br>引入控制授权访问系统资源的策略工具；<br>引入JFC（Java Foundation Classes），包括Swing 1.0、拖放和Java 2D类库；<br>引入Java 插件；<br>在JDBC中引入可滚动结果集、BLOB、CLOB、批量更新和用户自定义类型；<br>在Applet中添加声音支持。</p><h1 id="JDK-1-3"><a href="#JDK-1-3" class="headerlink" title="JDK 1.3"></a>JDK 1.3</h1><p>开发代号为Kestrel（红隼），于2000-05-08发行。<br><strong>引入的新特性包括：</strong><br>引入Java Sound API；<br>jar文件索引；<br>对Java的各个方面都做了大量优化和增强。</p><h1 id="JDK-1-4"><a href="#JDK-1-4" class="headerlink" title="JDK 1.4"></a>JDK 1.4</h1><p>开发代号为Merlin（隼），于2004-02-06发行（首次在JCP下发行）。<br><strong>引入的新特性包括:</strong><br>XML处理；<br>Java打印服务；<br>引入Logging API；<br>引入Java Web Start；<br>引入JDBC 3.0 API；<br>引入断言；<br>引入Preferences API；<br>引入链式异常处理；<br>支持IPv6；<br>支持正则表达式；<br>引入Image I/O slot machine API。</p><h1 id="JDK-5-0"><a href="#JDK-5-0" class="headerlink" title="JDK 5.0"></a>JDK 5.0</h1><p>开发代号为Tiger（老虎），于2004-09-30发行。<br><strong>引入的新特性包括:</strong><br>引入泛型；<br>增强循环，可以使用迭代方式；<br>自动装箱与自动拆箱；<br>类型安全的枚举；<br>可变参数；<br>静态引入；<br>元数据（注解）；<br>引入Instrumentation。</p><h1 id="JDK-6-0"><a href="#JDK-6-0" class="headerlink" title="JDK 6.0"></a>JDK 6.0</h1><p>开发代号为Mustang（野马），于2006-12-11发行。<br><strong>引入的新特性包括：</strong><br>支持脚本语言；<br>引入JDBC 4.0 API；<br>引入Java Compiler API；<br>可插拔注解；<br>增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access Protocol)的支持；<br>继承Web Services；<br>做了很多优化。</p><h1 id="JDK-7-0"><a href="#JDK-7-0" class="headerlink" title="JDK 7.0"></a>JDK 7.0</h1><p>开发代号是Dolphin（海豚），于2011-07-28发行。<br><strong>引入的新特性包括：</strong><br>switch语句块中允许以字符串作为分支条件；<br>在创建泛型对象时应用类型推断；<br>在一个语句块中捕获多种异常；<br>支持动态语言；<br>支持try-with-resources；<br>引入Java NIO.2开发包；<br>数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；<br>钻石型语法；<br>null值的自动处理。</p><h1 id="JDK-8-0"><a href="#JDK-8-0" class="headerlink" title="JDK 8.0"></a>JDK 8.0</h1><p>Java 8是于2014年3月14号发布。从Java 8开始开发代号已经弃用了，所以从Java 8之后已经没有官方的开发代号了。<br><strong>Java SE 8中的新特性</strong><br>Lambda表达式<br>Pipelines和Streams<br>Date和Time API<br>Default方法<br>Type注解<br>Nashhorn JavaScript引擎<br>并发计数器<br>Parallel操作<br>移除PermGen Error<br>TLS SNI</p><h1 id="JDK-9-0"><a href="#JDK-9-0" class="headerlink" title="JDK 9.0"></a>JDK 9.0</h1><p>Jigsaw 项目;模块化源码<br>简化进程API<br>轻量级 JSON API<br>钱和货币的API<br>改善锁争用机制<br>代码分段缓存<br>智能Java编译, 第二阶段<br>HTTP 2.0客户端<br>Kulla计划: Java的REPL实现</p><h1 id="JDK-10"><a href="#JDK-10" class="headerlink" title="JDK 10"></a>JDK 10</h1><h2 id="——————————————————————"><a href="#——————————————————————" class="headerlink" title="——————————————————————-"></a>——————————————————————-</h2><h2 id="JDK1-5新特性："><a href="#JDK1-5新特性：" class="headerlink" title="JDK1.5新特性："></a>JDK1.5新特性：</h2><h4 id="1-自动装箱与拆箱："><a href="#1-自动装箱与拆箱：" class="headerlink" title="1.自动装箱与拆箱："></a>1.自动装箱与拆箱：</h4><p>解释：<br>自动将基本数据类型转化为对应的封装类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   Integer i = 3;</span><br><span class="line">System.out.println(i + 12);  //自动装箱和拆箱 完成Integer 和 int的相互转换</span><br><span class="line"></span><br><span class="line">Integer i1 = 100; //(-128--127范围时，为true);</span><br><span class="line">Integer i2 = 100; //(-128--127范围时，为true);</span><br><span class="line">System.out.println(i1 == i2); //true，原因是Integer采用的是享元模式，范围 （-128--127 ）</span><br><span class="line"></span><br><span class="line">Integer i3 = 130; //(-128--127范围时，为true);</span><br><span class="line">Integer i4 = 130; //(-128--127范围时，为true);</span><br><span class="line">System.out.println(i3 == i4); //false，原因是Integer超过范围则不是享元模式</span><br><span class="line"></span><br><span class="line">char c1 = &apos;a&apos;;</span><br><span class="line">char c2 = &apos;a&apos;;</span><br><span class="line">System.out.println(c1==c2);//true 原因是char也是享元模式</span><br><span class="line"></span><br><span class="line">String s1 = &quot;a&quot;;</span><br><span class="line">String s2 = &quot;a&quot;;</span><br><span class="line">System.out.println(s1==s2);//true 原因是String字符串不可变，&quot;a&quot;的引用地址直接赋值给s1和s2</span><br><span class="line"></span><br><span class="line">String s3 = new String(&quot;a&quot;);</span><br><span class="line">String s4 = new String(&quot;a&quot;);</span><br><span class="line">System.out.println(s3==s4);//false 原因是String字符串&quot;a&quot;不可变，但new两个对象存储&quot;a&quot;的地址，分别将这两个new的地址赋值给s3和s4</span><br></pre></td></tr></table></figure><h4 id="2-枚举-常用来设计单例模式"><a href="#2-枚举-常用来设计单例模式" class="headerlink" title="2.枚举(常用来设计单例模式)"></a>2.枚举(常用来设计单例模式)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">    private static void enumTest() &#123;</span><br><span class="line">WeekDay weekDay1 = WeekDay.FRI;</span><br><span class="line">System.out.println(weekDay1);</span><br><span class="line">System.out.println(weekDay1.name());</span><br><span class="line">System.out.println(WeekDay.valueOf(&quot;SUN&quot;).toString()); // 匹配输出</span><br><span class="line">System.out.println(WeekDay.values().length); // 长度</span><br><span class="line"></span><br><span class="line">TrafficLamp green = TrafficLamp.GREEN;</span><br><span class="line">System.out.println(green);</span><br><span class="line">System.out.println(green.nextLamp());</span><br><span class="line">System.out.println(TrafficLamp.YELLOW.ordinal()); // 当前值得位置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public enum WeekDay &#123;</span><br><span class="line">SUN(7), MON(), TUE(), WED(), THI(), FRI(5), SAT(6);</span><br><span class="line">private WeekDay() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private WeekDay(int i) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public enum TrafficLamp &#123;</span><br><span class="line">RED(30) &#123;</span><br><span class="line">public TrafficLamp nextLamp() &#123;</span><br><span class="line">return GREEN;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">GREEN(45) &#123;</span><br><span class="line">public TrafficLamp nextLamp() &#123;</span><br><span class="line">return YELLOW;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">YELLOW(5) &#123;</span><br><span class="line">public TrafficLamp nextLamp() &#123;</span><br><span class="line">return RED;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">public abstract TrafficLamp nextLamp();</span><br><span class="line"></span><br><span class="line">private int time;</span><br><span class="line"></span><br><span class="line">private TrafficLamp(int time) &#123;</span><br><span class="line">this.time = time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-静态导入"><a href="#3-静态导入" class="headerlink" title="3.静态导入"></a>3.静态导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import static java.lang.Math.*;  //静态导入</span><br><span class="line">private static void test3() &#123;</span><br><span class="line">int x = 1;</span><br><span class="line">try &#123;</span><br><span class="line">   x++;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">   System.out.println(&quot;template&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">System.out.println(x);</span><br><span class="line">  </span><br><span class="line">System.out.println(max(3, 6));  //不必在使用 Math.max(3,6)</span><br><span class="line">System.out.println(abs(3 - 6));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-可变参数"><a href="#4-可变参数" class="headerlink" title="4.可变参数"></a>4.可变参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   //可变参数 调用</span><br><span class="line">System.out.println(add(10));</span><br><span class="line">System.out.println(add(10,15));</span><br><span class="line">System.out.println(add(10,15,20,1));</span><br><span class="line"></span><br><span class="line">   //定义可变参数方法</span><br><span class="line">private static int add(int a ,int... args) &#123;</span><br><span class="line">int sum = a;</span><br><span class="line">for (int i = 0; i &lt; args.length; i++) &#123;</span><br><span class="line">sum += args[i];</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-内省"><a href="#5-内省" class="headerlink" title="5.内省"></a>5.内省</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ReflectPoint pt1 = new ReflectPoint(3,5);</span><br><span class="line"></span><br><span class="line">BeanInfo beanInfo = Introspector.getBeanInfo(pt1.getClass());</span><br><span class="line">   PropertyDescriptor[] pds = beanInfo.getPropertyDescriptors();</span><br><span class="line">   Object retVal = null;</span><br><span class="line">   for(PropertyDescriptor pd : pds)&#123;</span><br><span class="line">     Method methodGetX = pd.getReadMethod();</span><br><span class="line">     retVal = methodGetX.invoke(pt1);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="jdk1-6新特性："><a href="#jdk1-6新特性：" class="headerlink" title="jdk1.6新特性："></a>jdk1.6新特性：</h2><p>1.Web服务元数据</p><p>Java 里的Web服务元数据跟微软的方案基本没有语义上的区别,自从JDK5添加了元数据功能(Annotation)之后,SUN几乎重构了整个J2EE体 系, 由于变化很大,干脆将名字也重构为Java EE, Java EE(当前版本为5.0)将元数据纳入很多规范当中,这其中就包括Web Services的相关规范, 加入元数据之后的Web Services服务器端编程模型就跟上面看到的C#片断差不多了, 这显然比以前的JAX-RPC编程模型简单(当然, Axis的编程模型也很简单).这里要谈的Web服务元数据(JSR 181)只是Java Web 服务规范中的一个,它跟Common Annotations, JAXB2, StAX, SAAJ和JAX-WS等共同构成Java EE 5的Web Services技术堆栈.</p><p>package WebServices;</p><p>import java.io.File;<br>import java.io.IOException;<br>import javax.jws.Oneway;<br>import javax.jws.WebMethod;<br>import javax.jws.WebParam;<br>import javax.jws.WebResult;<br>import javax.jws.WebService;<br>import javax.xml.ws.Endpoint;</p><p>@WebService(targetNamespace=”<a href="http://blog.csdn.net/chinajash&quot;,serviceName=&quot;HelloService" target="_blank" rel="noopener">http://blog.csdn.net/chinajash&quot;,serviceName=&quot;HelloService</a>“)<br>public class WSProvider {<br>     @WebResult(name=”Greetings”)//自定义该方法返回值在WSDL中相关的描述<br>     @WebMethod<br>     public String sayHi(@WebParam(name=”MyName”) String name){<br>         return “Hi,”+name; //@WebParam是自定义参数name在WSDL中相关的描述<br>     }<br>     @Oneway //表明该服务方法是单向的,既没有返回值,也不应该声明检查异常<br>     @WebMethod(action=”printSystemTime”,operationName=”printSystemTime”)//自定义该方法在WSDL中相关的描述<br>     public void printTime(){<br>         System.out.println(System.currentTimeMillis());<br>     }<br>     public static void main(String[] args) {<br>         Thread wsPublisher = new Thread(new WSPublisher());<br>         wsPublisher.start();<br>     }<br>     private static class WSPublisher implements Runnable{<br>         public void run() {<br>             //发布WSProvider到<a href="http://localhost:8888/chinajash/WSProvider这个地址,之前必须调用wsgen命令" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider这个地址,之前必须调用wsgen命令</a><br>             //生成服务类WSProvider的支持类,命令如下:<br>             //wsgen -cp . WebServices.WSProvider<br>             Endpoint.publish(“<a href="http://localhost:8888/chinajash/WSProvider&quot;,new" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider&quot;,new</a> WSProvider());<br>         }<br>     }<br>}</p><p>如果想看到Web Services Engine生成的WSDL文件是否遵守上面的元数据, 我们没有必要将上面的WSProvider部署到支持JSR-181的应用服务器或Servlet形式的Web Services Engine,现在JDK6已经提供了一个很简单的机制可以用来测试和发布Web Services,下面讲讲如何在JDK6环境下发布Web Services和查看生成的WSDL<br>1.将<jdk_home>/bin加入path环境变量<br>2.在命令行下切换当前目录到WSProvider的class文件所在的目录,运行下面命令<br>wsgen -cp . WebServices.WSProvider<br>在这个例子中会生成以下3个类的源代码文件及class文件<br>SayHi<br>SayHiResponse<br>PrintTime<br>3.执行如下代码发布WSProvider到<a href="http://localhost:8888/chinajash/WSProvider,在这里可以执行WSProvider类的main方法就可以" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider,在这里可以执行WSProvider类的main方法就可以</a><br>Endpoint.publish(“<a href="http://localhost:8888/chinajash/WSProvider&quot;,new" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider&quot;,new</a> WSProvider());<br>4.在浏览器输入<a href="http://localhost:8888/chinajash/WSProvider?wsdl就可以看到生成的WSDL文件，为了节省篇幅,这里就不把生成的WSDL文件贴上了，大家可以自己动手试试" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider?wsdl就可以看到生成的WSDL文件，为了节省篇幅,这里就不把生成的WSDL文件贴上了，大家可以自己动手试试</a>.<br>2.脚本语言支持</jdk_home></p><p>JDK6增加了对脚本语言的支持(JSR 223)， 原理上是将脚本语言编译成bytecode，这样脚本语言也能享用Java平台的诸多优势，包括可移植性，安全等，另外，由于现在是编译成 bytecode后再执行，所以比原来边解释边执行效率要高很多。加入对脚本语言的支持后，对Java语言也提供了以下好处。<br>1、许多脚本语言都有动态特性，比如，你不需要用一个变量之前先声明它，你可以用一个变量存放完全不同类型的对象，你不需要做强制类型转换，因为转换都是自动的。现在Java语言也可以通过对脚本语言的支持间接获得这种灵活性。<br>2、 可以用脚本语言快速开发产品原型，因为现在可以Edit-Run，而无需Edit-Compile-Run，当然，因为Java有非常好的IDE支持，我 们完全可以在IDE里面编辑源文件，然后点击运行(隐含编译)，以此达到快速开发原型的目的，所以这点好处基本上可以忽略。<br>3、通过引入脚本语言可以轻松实现Java应用程序的扩展和自定义，我们可以把原来分布在在Java应用程序中的配置逻辑，数学表达式和业务规则提取出来，转用JavaScript来处理。</p><p>Sun的JDK6实现包含了一个基于Mozilla Rhino的 脚本语言引擎，支持JavaScript，这并不是说明JDK6只支持JavaScript，任何第三方都可以自己实现一个JSR-223兼容的脚本引擎 使得JDK6支持别的脚本语言，比如，你想让JDK6支持Ruby，那你可以自己按照JSR 223 的规范实现一个Ruby的脚本引擎类，具体一点，你需要实现javax.script.ScriptEngine(简单起见，可以继承 javax.script.AbstractScriptEngine)和javax.script.ScriptEngineFactory两个接口。 当然，在你实现自己的脚本语言引擎之前，先到scripting.dev.java.net project 这里看看是不是有人已经帮你做了工作，这样你就可以直接拿来用就行。</p><p>Scripting API</p><hr><p>Scripting API是用于在Java里面编写脚本语言程序的API， 在Javax.script中可以找到Scripting API，我们就是用这个API来编写JavaScript程序，这个包里面有一个ScriptEngineManager类，它是使用Scripting API的入口，ScriptEngineManager可以通过jar服务发现(service discovery)机制寻找合适的脚本引擎类(ScriptEngine)，使用Scripting API的最简单方式只需下面三步<br>1、创建一个ScriptEngineManager对象<br>2、通过ScriptEngineManager获得ScriptEngine对象<br>3、用ScriptEngine的eval方法执行脚本</p><p>下面是一个Hello World程序</p><p>public class HelloScript {public static void main(String[] args) throws Exception {         ScriptEngineManager factory = new ScriptEngineManager();//step 1         ScriptEngine engine = factory.getEngineByName(“JavaScript”);//Step 2             engine.eval_r(“print(‘Hello, Scripting’)”);//Step 3     }     }运行上面程序，控制台会输出Hello, Scripting上面这个简单的Scripting程序演示了如何在Java里面运行脚本语言，除此之外，我们还可以利用Scripting API实现以下功能1、暴露Java对象为脚本语言的全局变量2、在Java中调用脚本语言的方法3、脚本语言可以实现Java的接口4、脚本语言可以像Java一样使用JDK平台下的类下面的类演示了以上4种功能package Scripting;import java.io.File;import javax.script.Invocable;import javax.script.ScriptEngine;import javax.script.ScriptEngineManager;import javax.script.ScriptException;public class ScriptingAPITester {     public static void main(String[] args) throws Exception {         ScriptEngineManager manager = new ScriptEngineManager();         ScriptEngine engine = manager.getEngineByName(“JavaScript”);         testScriptVariables(engine);//演示如何暴露Java对象为脚本语言的全局变量          testInvokeScriptMethod(engine);//演示如何在Java中调用脚本语言的方法          testScriptInterface(engine);//演示脚本语言如何实现Java的接口          testUsingJDKClasses(engine);//演示脚本语言如何使用JDK平台下的类     }         public static void testScriptVariables(ScriptEngine engine) throws ScriptException{         File file = new File(“test.txt”);         engine.put(“f”, file);         engine.eval_r(“println(‘Total Space:’+f.getTotalSpace())”);             }         public static void testInvokeScriptMethod(ScriptEngine engine) throws Exception{         String script = “function hello(name) { return ‘Hello,’ + name;}”;         engine.eval_r(script);         Invocable inv = (Invocable) engine;         String res = (String)inv.invokeFunction(“hello”, “Scripting” );         System.out.println(“res:”+res);     }         public static void testScriptInterface(ScriptEngine engine) throws ScriptException{         String script = “var obj = new Object(); obj.run = function() { println(‘run method called’); }”;         engine.eval_r(script);         Object obj = engine.get(“obj”);         Invocable inv = (Invocable) engine;         Runnable r = inv.getInterface(obj,Runnable.class);         Thread th = new Thread(r);         th.start();     }         public static void testUsingJDKClasses(ScriptEngine engine) throws Exception{         //Packages是脚本语言里的一个全局变量,专用于访问JDK的package         String js = “function doSwing(t){var f=new Packages.javax.swing.JFrame(t);f.setSize(400,300);f.setVisible(true);}”;         engine.eval_r(js);         Invocable inv = (Invocable) engine;         inv.invokeFunction(“doSwing”, “Scripting Swing” );     }}Scripting Tool</p><hr><p>SUN 提供的JDK6中有一个命令行工具??jrunscript，你可以在<jdk6_home>/bin下面找到这个工 具，jrunscript是一个脚本语言的解释程序，它独立于脚本语言，但默认是用JavaScript，我们可以用jrunscript来测试自己写的 脚本语言是否正确，下面是一个在命令行运行jrunscript的简单例子<br>jrunscript<br>js&gt;println(“Hello,JrunScript”);<br>Hello,JrunScript<br>js&gt;9*8<br>72.0<br>js&gt;<br>3.JTable的排序和过滤</jdk6_home></p><p>原来的JTable基本上是只能显示数据，在JDK6新增了对JTable的排序和过滤功能，下面代码演示了这两个功能</p><p>public class JTableTester {<br>     static String data[][] = {<br>         {“China”,”Beijing”,”Chinese”},<br>         {“America”,”Washington”,”English”},<br>         {“Korea”,”Seoul”,”Korean”},<br>         {“Japan”,”Tokyo”,”Japanese”},<br>         {“France”,”Paris”,”French”},<br>         {“England”,”London”,”English”},<br>         {“Germany”,”Berlin”,”German”},<br>     };<br>     static String titles[] = {“Country”,”Capital”,”Language”};<br>     public static void main(String[] args) {<br>         DefaultTableModel m = new DefaultTableModel(data,titles);<br>         JTable t = new JTable(m);<br>         final TableRowSorter sorter = new TableRowSorter(m);<br>         t.setRowSorter(sorter); //为JTable设置排序器</p><pre><code>    JScrollPane sPane = new JScrollPane();    sPane.setViewportView(t);    JPanel p = new JPanel();    p.setLayout(new BoxLayout(p,BoxLayout.X_AXIS));    JLabel l = new JLabel(&quot;Criteria:&quot;);    final JTextField tf = new JTextField();    JButton b = new JButton(&quot;Do Filter&quot;);    p.add(l);    p.add(tf);    p.add(b);    b.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {            if(tf.getText().length()==0){                sorter.setRowFilter(null);            }else{                sorter.setRowFilter(RowFilter.regexFilter(tf.getText()));//为JTable设置基于正则表达式的过滤条件            }        }    });    JFrame f = new JFrame(&quot;JTable Sorting and Filtering&quot;);    f.getContentPane().add(sPane,BorderLayout.CENTER);            f.getContentPane().add(p,BorderLayout.SOUTH);    f.setSize(400,300);    f.setVisible(true);}</code></pre><p>}<br>运行上面程序，单击JTable的某一个title，这个title对应的列就会按照升序/降序重新排列；在下面的Criteria文本框中输入”ese”，点击”Do Filter”按钮，JTable将只显示带有”ese”字符串的行，也就是China和Japan两行，如果文本框里面什么都没有，点击”Do Filter”按钮，这时JTable会显示所有的行。<br>4.更简单,更强大的JAX-WS</p><p>JAX-WS2.0的来历</p><hr><p>JAX-WS(JSR-224) 是Java Architecture for XML Web Services的缩写,简单说就是一种用Java和XML开发Web Services应用程序的框架, 目前版本是2.0, 它是JAX-RPC 1.1的后续版本, J2EE 1.4带的就是JAX-RPC1.1, 而Java EE 5里面包括了JAX-WS 2.0,但为了向后兼容,仍然支持JAX-RPC. 现在,SUN又把JAX-WS直接放到了Java SE 6里面,由于JAX-WS会用到Common Annotation(JSR 250),Java Web Services Metadata(JSR 181), JAXB2(JSR 222), StAX(JSR 173), 所以SUN也必须把后几个原属于Java EE范畴的Components下放到Java SE, 现在我们可以清楚地理解了为什么Sun要把这些看似跟Java SE没有关系的Components放进来,终极目的就是要在Java SE里面支持Web Services.</p><p>JAX-WS2.0的架构</p><hr><p>JAX-WS不是一个孤立的框架,它依赖于众多其他的规范,本质上它由以下几部分组成<br>1.用来开发Web Services的Java API<br>2.用来处理Marshal/Unmarshal的XML Binding机制,JAX-WS2.0用JAXB2来处理Java Object与XML之间的映射,Marshalling就是把Java Object映射到XML,Unmarshalling则是把XML映射到Java Object.之所以要做Java Object与XML的映射,是因为最终作为方法参数和返回值的Java Object要通过网络传输协议(一般是SOAP)传送,这就要求必须对Java Object做类似序列化和反序列化的工作,在SOAP中就是要用XML来表示Java object的内部状态<br>3.众多元数据(Annotations)会被JAX-WS用来描述Web Services的相关类,包括Common Annotations, Web Services Metadata, JAXB2的元数据和JAX-WS2.0规范自己的元数据.<br>4.Annotation Processing Tool(APT) 是JAX-WS重要的组成部分,由于JAX-WS2.0规范用到很多元数据,所以需要APT来处理众多的Annotations. 在<jdk_home>/bin下有两个命令wsgen和wsimport,就是用到APT和Compiler API来处理碰到的Annotations,wsgen可以为Web Services Provider产生并编译必要的帮助类和相关支持文件,wsimport以WSDL作为输入为Web Service Consumer产生并编译必要的帮助类和相关支持文件.<br>5.JAX-WS还包括JAX-WS Runtime与应用服务器和工具之间的契约关系</jdk_home></p><p>JAX-WS2.0的编程模型</p><hr><p>现在用JAX-WS2.0来编写Web Services非常简单,不像JAX-RPC,JAX-WS可以把任意POJO暴露为Web Services,服务类不需要实现接口,服务方法也没有必要抛出RMI异常.下面介绍在JDK6环境下用JAX-WS2.0开发和测试Web Services的步骤<br>1.编写服务类,并用Web Services Metadata(JSR-181)标注这个服务类,我用我的另一篇BlogJDK6的新特性之十:Web服务元数据中的WSProvider类作为服务类的例子,在此我重复贴一下WSProvider类的源代码:</p><p>@WebService(targetNamespace=”<a href="http://blog.csdn.net/chinajash&quot;,serviceName=&quot;HelloService" target="_blank" rel="noopener">http://blog.csdn.net/chinajash&quot;,serviceName=&quot;HelloService</a>“)<br>public class WSProvider {<br>     @WebResult(name=”Greetings”)//自定义该方法返回值在WSDL中相关的描述<br>     @WebMethod<br>     public String sayHi(@WebParam(name=”MyName”) String name){<br>         return “Hi,”+name; //@WebParam是自定义参数name在WSDL中相关的描述<br>     }<br>     @Oneway //表明该服务方法是单向的,既没有返回值,也不应该声明检查异常<br>     @WebMethod(action=”printSystemTime”,operationName=”printSystemTime”)//自定义该方法在WSDL中相关的描述<br>     public void printTime(){<br>         System.out.println(System.currentTimeMillis());<br>     }<br>     public static void main(String[] args) {<br>         Thread wsPublisher = new Thread(new WSPublisher());<br>         wsPublisher.start();<br>     }<br>     private static class WSPublisher implements Runnable{<br>         public void run() {<br>             //发布WSProvider到<a href="http://localhost:8888/chinajash/WSProvider这个地址,之前必须调用wsgen命令" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider这个地址,之前必须调用wsgen命令</a><br>             //生成服务类WSProvider的支持类,命令如下:<br>             //wsgen -cp . WebServices.WSProvider<br>             Endpoint.publish(“<a href="http://localhost:8888/chinajash/WSProvider&quot;,new" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider&quot;,new</a> WSProvider());<br>         }<br>     }<br>}<br>2.用wsgen生成上面服务类的必要的帮助类,然后调用用EndPoint类的静态方法publish发布服务类(步骤请参考我的另一篇Blog JDK6的新特性之十:Web服务元数据),我在这里是将服务类发布到<a href="http://localhost:8888/chinajash/WSProvider" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider</a><br>3.用wsimport为服务消费者(也就是服务的客户端)生成必要的帮助类,命令如下:<br>wsimport <a href="http://localhost:8888/chinajash/WSProvider?wsdl" target="_blank" rel="noopener">http://localhost:8888/chinajash/WSProvider?wsdl</a><br>这会在&lt;当前目录&gt;\net\csdn\blog\chinajash下生成客户端的帮助类,在这个例子中会生成7个类<br>HelloService.class<br>ObjectFactory.class<br>package-info.class<br>PrintSystemTime.class<br>SayHi.class<br>SayHiResponse.class<br>WSProvider.class<br>4.在客户端用下面代码即可调用步骤1定义的Web Service<br>HelloService hs = new HelloService();<br>WSProvider ws = hs.getWSProviderPort();<br>System.out.println(ws.sayHi(“chinajash”));<br>ws.printSystemTime();<br>调用上述代码后客户端控制台输出<br>hi,chinajash<br>服务端控制台输出服务器当前系统时间<br>5.轻量级Http Server</p><p>JDK6的新特性之五:轻量级Http Server</p><p>JDK6提供了一个简单的Http Server API,据此我们可以构建自己的嵌入式Http Server,它支持Http和Https协议,提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的Http Server API 来实现,程序员必须自己实现HttpHandler接口,HttpServer会调用HttpHandler实现类的回调方法来处理客户端请求,在这里, 我们把一个Http请求和它的响应称为一个交换,包装成HttpExchange类,HttpServer负责将HttpExchange传给 HttpHandler实现类的回调方法.下面代码演示了怎样创建自己的Http Server</p><p>public class HTTPServerAPITester {<br>     public static void main(String[] args) {<br>         try {<br>             HttpServer hs = HttpServer.create(new InetSocketAddress(8888),0);//设置HttpServer的端口为8888<br>             hs.createContext(“/chinajash”, new MyHandler());//用MyHandler类内处理到/chinajash的请求<br>             hs.setExecutor(null); // creates a default executor<br>             hs.start();<br>         } catch (IOException e) {<br>             e.printStackTrace();<br>         }<br>     }<br>}</p><p>class MyHandler implements HttpHandler {<br>    public void handle(HttpExchange t) throws IOException {<br>        InputStream is = t.getRequestBody();<br>        String response = “</p><h3>Happy New Year 2007!–Chinajash</h3>“;<br>        t.sendResponseHeaders(200, response.length());<br>        OutputStream os = t.getResponseBody();<br>        os.write(response.getBytes());<br>        os.close();<br>    }<br>}<p></p><p>运行程序后,在浏览器内输入<a href="http://localhost:8888/xx,浏览器输出" target="_blank" rel="noopener">http://localhost:8888/xx,浏览器输出</a><br>6.嵌入式数据库 Derby</p><p>Derby是IBM送给开源社区的又一个礼物，是一个pure java的数据库，现在已经被列入到java1.6中。<br>不知道对于大数据量的性能如何，但传说中启动derby只会给JVM添加2M的内存，对那些小数据库应用，比如像用access那种应该是挺有诱惑力的。<br>另外，麻雀虽小，五脏俱全，功能要比access多得多咯，包括事务处理，并发，触发器都有，管理又简单，因此自己用来做点工具正好合适。<br>废话少说，介绍一下我折腾了半天的经验吧。<br>我的Derby配置过程：<br>1，下载db-derby-10.1.3.1-bin.tar.gz,derby_core_plugin_10.1.3.zip和derby_ui_plugin_1.1.0.zip，把两个插件安装到eclipse上<br>2，打开ecllipse,新建一个project<br>3，右键这个project，选择Apache Derby，再选择add apache derby native，发现只是给我的project添加了几个derby的jar，还不是在我看着顺眼的lib目录里，索性干掉，换上db-derby- 10.1.3.1-bin.tar.gz解压出来以后lib目录下的jar文件，在Build Path里设置一下；<br>4，右键Project，在apache derby里选择start apache derby network server，控制台可以看到derby启动后打出的“服务器准备在端口 1527 上接受连接。”<br>5，右键Project，在apache derby里选择ij(Interactive SQL)，启动SQL控制台；<br>6，输入connect jdbc:derby:testdb;create=true; 注意要有单引号，可以在工程跟目录下创建testdb数据库，可以看到一个新建的目录testdb，那里的文件就是数据库咯；<br>7，用标准的SQL语句来建一个数据库试试：<br>create table test (a varchar(4) not null, b char(2) primary key);<br>居然可以用，太神奇了，呵呵<br>8，再插入一条语句试试呢，insert into test(a,b) values(a,11);，嗯，不错，可以用select 查出来的哦。<br>9，再插一下：insert into test(a,b) values(a,11);，哦哦，报错了，“错误 23505：语句异常终止，因为它导致“TEST”上所定义的“SQL060710092132480”标识的唯一或主键约束或唯一索引中出现重复键值。” 呵呵。<br>10，好了，现在可以像你控制的其他数据库一样来控制Derby了。</p><p>如果上述方法不行，或者你习惯了在eclipse之外使用和管理数据库，那么可以很方便的把Derby“装”在系统里。下面我说一下步骤：<br>1，把db-derby-10.1.3.1-bin.tar.gz解压到c:\derby,使lib和framework两个目录在c:\derby下边即可<br>2，设置环境变量</p><p>设置一个c:\derby\framework\embeded\bin或c:\derby\framework\NetworkServe\bin到Path中，这样我们就可以直接执行上边介绍的connect这样的命令而不用每次钻到那个目录下去执行了<br>设置c:\derby\lib\derby.jar;c:\derby\lib\derbytoos.jar到CLASSPATH中，以便让这些java编成的命令能够正确执行；<br>3，打开cmd<br>4，敲入startNetworkServer，可以看到像在eclisp中提示的那样启动了server<br>5，再打开一个cmd,敲入sysinfo,可以看到derby的环境信息了，注意在java user dir这一项，也许是java用户目录上和上边看到的会有所不同哦，这样在connect jdbc:derby:testdb;create=true;的建的数据库目录就不一样咯。<br>6，敲入ij，好了，进入到上边的交互界面，可以建一个数据库看看了。<br>7，最后在另外一个cmd中敲入stopNetworkServer就可以关闭数据库了。</p><p>如果你两种方法都试过了，那么需要注意的，还是上边步骤5的问题，这个问题是你可能随时会启动一个数据库或新建一个数据库，但如果你刚刚使用derby，你可能还没有察觉。<br>derby实际上有两种启动方式，一种是嵌入式的，一种是网络服务器的启动。<br>1，我们在eclipse中右键start apache derby network server那个，就是网络服务器的启动方式，在这种方式下可以用另外一台计算机在ij中以：<br>connect jdbc:derby://192.168.0.28:1527/testdb<br>的方式进行链接。<br>2，第二种启动方式是在ij里边就直接<br>connect jdbc:derby:testdb<br>这实际是在连当前配置环境下java user dir下那个目录的数据库。</p><p>看到这里可能有点糊涂了，这么就会出问题了那？<br>实际上derby的访问更像是一种使用derby driver对本地文件系统的访问，不管启动不启动网络服务器，都可以用driver访问本地的数据库。这样，在ij里边像第二种方式那样建立连接是完全可以的。启动了网络服务器，只不过是能够让其他主机访问罢了。</p><p>另外一个问题是，在eclipse中和在系统中连接服务器，在connect的时候这个当前配置环境是不一样的，eclipse默认工程所在路径是数据库的所在路径，而在系统中“装”derby则会认为 c:\document and settings下边那个用户目录是数据库的所在路径。<br>jdk1.7新特性：</p><p>1，switch中可以使用字串了<br>String s = “test”;<br>switch (s) {<br>case “test” :<br>     System.out.println(“test”);<br>case “test1” :<br>    System.out.println(“test1”);<br>    break ;<br>default :<br>    System.out.println(“break”);<br>    break ;<br>}</p><p>2.运用List<string> tempList = new ArrayList&lt;&gt;(); 即泛型实例化类型自动推断<br>3.语法上支持集合，而不一定是数组</string></p><p>final List<integer> piDigits = [ 1,2,3,4,5,8 ];<br>4.新增一些取环境信息的工具方法</integer></p><p>File System.getJavaIoTempDir() // IO临时文件夹</p><p>File System.getJavaHomeDir() // JRE的安装目录</p><p>File System.getUserHomeDir() // 当前用户目录</p><p>File System.getUserDir() // 启动java进程时所在的目录5</p><p>5.Boolean类型反转，空指针安全,参与位运算</p><p>Boolean Booleans.negate(Boolean booleanObj)</p><p>True =&gt; False , False =&gt; True, Null =&gt; Null</p><p>boolean Booleans.and(boolean[] array)</p><p>boolean Booleans.or(boolean[] array)</p><p>boolean Booleans.xor(boolean[] array)</p><p>boolean Booleans.and(Boolean[] array)</p><p>boolean Booleans.or(Boolean[] array)</p><p>boolean Booleans.xor(Boolean[] array)</p><p>6.两个char间的equals<br>boolean Character.equalsIgnoreCase(char ch1, char ch2)<br>7.安全的加减乘除<br>int Math.safeToInt(long value)</p><p>int Math.safeNegate(int value)</p><p>long Math.safeSubtract(long value1, int value2)</p><p>long Math.safeSubtract(long value1, long value2)</p><p>int Math.safeMultiply(int value1, int value2)</p><p>long Math.safeMultiply(long value1, int value2)</p><p>long Math.safeMultiply(long value1, long value2)</p><p>long Math.safeNegate(long value)</p><p>int Math.safeAdd(int value1, int value2)</p><p>long Math.safeAdd(long value1, int value2)</p><p>long Math.safeAdd(long value1, long value2)</p><p>int Math.safeSubtract(int value1, int value2)</p><p>8.map集合支持并发请求，且可以写成 Map map = {name:”xxx”,age:18};</p><hr><p>欢迎阅读我编写的Java 8介绍。本教程将带领你一步一步地认识这门语言的新特性。通过简单明了的代码示例，你将会学习到如何使用默认接口方法，Lambda表达式，方法引用和重复注解。看完这篇教程后，你还将对最新推出的API有一定的了解，例如：流控制，函数式接口，map扩展和新的时间日期API等等。</p><p>目 录 [ - ]<br>允许在接口中有默认方法实现<br>Lambda表达式<br>函数式接口<br>方法和构造函数引用<br>Lambda的范围<br>内置函数式接口<br>Streams<br>Parallel Streams<br>Map<br>时间日期API<br>Annotations<br>总结<br>允许在接口中有默认方法实现 Top<br>Java 8 允许我们使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。下面是我们的第一个例子： </p><p>Java代码<br>interface Formula {<br>    double calculate(int a);  </p><pre><code>default double sqrt(int a) {      return Math.sqrt(a);  }  </code></pre><p>}  </p><p>在接口Formula中，除了抽象方法caculate以外，还定义了一个默认方法sqrt。Formula的实现类只需要实现抽象方法caculate就可以了。默认方法sqrt可以直接使用。 </p><p>Java代码<br>Formula formula = new Formula() {<br>    @Override<br>    public double calculate(int a) {<br>        return sqrt(a * 100);<br>    }<br>};  </p><p>formula.calculate(100);     // 100.0<br>formula.sqrt(16);           // 4.0  </p><p>formula对象以匿名对象的形式实现了Formula接口。代码很啰嗦：用了6行代码才实现了一个简单的计算功能：a*100开平方根。我们在下一节会看到，Java 8 还有一种更加优美的方法，能够实现包含单个函数的对象。 </p><p>Lambda表达式 Top<br>让我们从最简单的例子开始，来学习如何对一个string列表进行排序。我们首先使用Java 8之前的方法来实现： </p><p>Java代码<br>List<string> names = Arrays.asList(“peter”, “anna”, “mike”, “xenia”);  </string></p><p>Collections.sort(names, new Comparator<string>() {<br>    @Override<br>    public int compare(String a, String b) {<br>        return b.compareTo(a);<br>    }<br>});  </string></p><p>静态工具方法Collections.sort接受一个list，和一个Comparator接口作为输入参数，Comparator的实现类可 以对输入的list中的元素进行比较。通常情况下，你可以直接用创建匿名Comparator对象，并把它作为参数传递给sort方法。 </p><p>除了创建匿名对象以外，Java 8 还提供了一种更简洁的方式，Lambda表达式。 </p><p>Java代码<br>Collections.sort(names, (String a, String b) -&gt; {<br>    return b.compareTo(a);<br>});  </p><p>你可以看到，这段代码就比之前的更加简短和易读。但是，它还可以更加简短： </p><p>Java代码<br>Collections.sort(names, (String a, String b) -&gt; b.compareTo(a));  </p><p>只要一行代码，包含了方法体。你甚至可以连大括号对{}和return关键字都省略不要。不过这还不是最短的写法： </p><p>Java代码<br>Collections.sort(names, (a, b) -&gt; b.compareTo(a));  </p><p>Java编译器能够自动识别参数的类型，所以你就可以省略掉类型不写。让我们再深入地研究一下lambda表达式的威力吧。 </p><p>函数式接口 Top<br>Lambda表达式如何匹配Java的类型系统？每一个lambda都能够通过一个特定的接口，与一个给定的类型进行匹配。一个所谓的函数式接口必须要有 且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添 加默认方法。 </p><p>任意只包含一个抽象方法的接口，我们都可以用来做成lambda表达式。为了让你定义的接口满足要求，你应当在接口前加上@FunctionalInterface 标注。编译器会注意到这个标注，如果你的接口中定义了第二个抽象方法的话，编译器会抛出异常。 </p><p>举例： </p><p>Java代码<br>@FunctionalInterface<br>interface Converter<f, t=""> {<br>    T convert(F from);<br>}  </f,></p><p>Converter<string, integer=""> converter = (from) -&gt; Integer.valueOf(from);<br>Integer converted = converter.convert(“123”);<br>System.out.println(converted);    // 123  </string,></p><p>注意，如果你不写@FunctionalInterface 标注，程序也是正确的。 </p><p>方法和构造函数引用 Top<br>上面的代码实例可以通过静态方法引用，使之更加简洁： </p><p>Java代码<br>Converter<string, integer=""> converter = Integer::valueOf;<br>Integer converted = converter.convert(“123”);<br>System.out.println(converted);   // 123  </string,></p><p>Java 8 允许你通过::关键字获取方法或者构造函数的的引用。上面的例子就演示了如何引用一个静态方法。而且，我们还可以对一个对象的方法进行引用： </p><p>Java代码<br>class Something {<br>    String startsWith(String s) {<br>        return String.valueOf(s.charAt(0));<br>    }<br>}  </p><p>Something something = new Something();<br>Converter<string, string=""> converter = something::startsWith;<br>String converted = converter.convert(“Java”);<br>System.out.println(converted);    // “J”  </string,></p><p>让我们看看如何使用::关键字引用构造函数。首先我们定义一个示例bean，包含不同的构造方法： </p><p>Java代码<br>class Person {<br>    String firstName;<br>    String lastName;  </p><pre><code>Person() {}  Person(String firstName, String lastName) {      this.firstName = firstName;      this.lastName = lastName;  }  </code></pre><p>}  </p><p>接下来，我们定义一个person工厂接口，用来创建新的person对象： </p><p>Java代码<br>interface PersonFactory</p><p extends="" person=""> {<br>    P create(String firstName, String lastName);<br>}  </p><p>然后我们通过构造函数引用来把所有东西拼到一起，而不是像以前一样，通过手动实现一个工厂来这么做。 </p><p>Java代码<br>PersonFactory<person> personFactory = Person::new;<br>Person person = personFactory.create(“Peter”, “Parker”);  </person></p><p>我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。 </p><p>Lambda的范围 Top<br>对于lambdab表达式外部的变量，其访问权限的粒度与匿名对象的方式非常类似。你能够访问局部对应的外部区域的局部final变量，以及成员变量和静态变量。 </p><p>访问局部变量 </p><p>我们可以访问lambda表达式外部的final局部变量： </p><p>Java代码<br>final int num = 1;<br>Converter<integer, string=""> stringConverter =<br>        (from) -&gt; String.valueOf(from + num);  </integer,></p><p>stringConverter.convert(2);     // 3  </p><p>但是与匿名对象不同的是，变量num并不需要一定是final。下面的代码依然是合法的： </p><p>Java代码<br>int num = 1;<br>Converter<integer, string=""> stringConverter =<br>        (from) -&gt; String.valueOf(from + num);  </integer,></p><p>stringConverter.convert(2);     // 3  </p><p>然而，num在编译的时候被隐式地当做final变量来处理。下面的代码就不合法： </p><p>Java代码<br>int num = 1;<br>Converter<integer, string=""> stringConverter =<br>        (from) -&gt; String.valueOf(from + num);<br>num = 3;  </integer,></p><p>在lambda表达式内部企图改变num的值也是不允许的。 </p><p>访问成员变量和静态变量 </p><p>与局部变量不同，我们在lambda表达式的内部能获取到对成员变量或静态变量的读写权。这种访问行为在匿名对象里是非常典型的。 </p><p>Java代码<br>class Lambda4 {<br>    static int outerStaticNum;<br>    int outerNum;  </p><pre><code>void testScopes() {      Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; {          outerNum = 23;          return String.valueOf(from);      };      Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; {          outerStaticNum = 72;          return String.valueOf(from);      };  }  </code></pre><p>}  </p><p>访问默认接口方法 </p><p>还记得第一节里面formula的那个例子么？ 接口Formula定义了一个默认的方法sqrt，该方法能够访问formula所有的对象实例，包括匿名对象。这个对lambda表达式来讲则无效。 </p><p>默认方法无法在lambda表达式内部被访问。因此下面的代码是无法通过编译的： </p><p>Java代码<br>Formula formula = (a) -&gt; sqrt( a * 100);  </p><p>内置函数式接口 Top<br>JDK 1.8 API中包含了很多内置的函数式接口。有些是在以前版本的Java中大家耳熟能详的，例如Comparator接口，或者Runnable接口。对这些现 成的接口进行实现，可以通过@FunctionalInterface 标注来启用Lambda功能支持。 </p><p>此外，Java 8 API 还提供了很多新的函数式接口，来降低程序员的工作负担。有些新的接口已经在Google Guava库中很有名了。如果你对这些库很熟的话，你甚至闭上眼睛都能够想到，这些接口在类库的实现过程中起了多么大的作用。 </p><p>Predicates </p><p>Predicate是一个布尔类型的函数，该函数只有一个输入参数。Predicate接口包含了多种默认方法，用于处理复杂的逻辑动词（and, or，negate）： </p><p>Java代码<br>Predicate<string> predicate = (s) -&gt; s.length() &gt; 0;  </string></p><p>predicate.test(“foo”);              // true<br>predicate.negate().test(“foo”);     // false  </p><p>Predicate<boolean> nonNull = Objects::nonNull;<br>Predicate<boolean> isNull = Objects::isNull;  </boolean></boolean></p><p>Predicate<string> isEmpty = String::isEmpty;<br>Predicate<string> isNotEmpty = isEmpty.negate();  </string></string></p><p>Functions </p><p>Function接口接收一个参数，并返回单一的结果。默认方法可以将多个函数串在一起（compse, andThen）： </p><p>Java代码<br>Function<string, integer=""> toInteger = Integer::valueOf;<br>Function<string, string=""> backToString = toInteger.andThen(String::valueOf);  </string,></string,></p><p>backToString.apply(“123”);     // “123”  </p><p>Suppliers </p><p>Supplier接口产生一个给定类型的结果。与Function不同的是，Supplier没有输入参数。 </p><p>Java代码<br>Supplier<person> personSupplier = Person::new;<br>personSupplier.get();   // new Person  </person></p><p>Consumers </p><p>Consumer代表了在一个输入参数上需要进行的操作。 </p><p>Java代码<br>Consumer<person> greeter = (p) -&gt; System.out.println(“Hello, “ + p.firstName);<br>greeter.accept(new Person(“Luke”, “Skywalker”));  </person></p><p>Comparators </p><p>Comparator接口在早期的Java版本中非常著名。Java 8 为这个接口添加了不同的默认方法。 </p><p>Java代码<br>Comparator<person> comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);  </person></p><p>Person p1 = new Person(“John”, “Doe”);<br>Person p2 = new Person(“Alice”, “Wonderland”);  </p><p>comparator.compare(p1, p2);             // &gt; 0<br>comparator.reversed().compare(p1, p2);  // &lt; 0  </p><p>Optionals </p><p>Optional不是一个函数式接口，而是一个精巧的工具接口，用来防止NullPointerEception产生。这个概念在下一节会显得很重要，所以我们在这里快速地浏览一下Optional的工作原理。 </p><p>Optional是一个简单的值容器，这个值可以是null，也可以是non-null。考虑到一个方法可能会返回一个non-null的值，也可能返回一个空值。为了不直接返回null，我们在Java 8中就返回一个Optional。 </p><p>Java代码<br>Optional<string> optional = Optional.of(“bam”);  </string></p><p>optional.isPresent();           // true<br>optional.get();                 // “bam”<br>optional.orElse(“fallback”);    // “bam”  </p><p>optional.ifPresent((s) -&gt; System.out.println(s.charAt(0)));     // “b”  </p><p>Streams Top<br>java.util.Stream表示了某一种元素的序列，在这些元素上可以进行各种操作。Stream操作可以是中间操作，也可以是完结操作。完结操作 会返回一个某种类型的值，而中间操作会返回流对象本身，并且你可以通过多次调用同一个流操作方法来将操作结果串起来（就像StringBuffer的 append方法一样————译者注）。Stream是在一个源的基础上创建出来的，例如java.util.Collection中的list或者 set（map不能作为Stream的源）。Stream操作往往可以通过顺序或者并行两种方式来执行。 </p><p>我们先了解一下序列流。首先，我们通过string类型的list的形式创建示例数据： </p><p>Java代码<br>List<string> stringCollection = new ArrayList&lt;&gt;();<br>stringCollection.add(“ddd2”);<br>stringCollection.add(“aaa2”);<br>stringCollection.add(“bbb1”);<br>stringCollection.add(“aaa1”);<br>stringCollection.add(“bbb3”);<br>stringCollection.add(“ccc”);<br>stringCollection.add(“bbb2”);<br>stringCollection.add(“ddd1”);  </string></p><p>Java 8中的Collections类的功能已经有所增强，你可以之直接通过调用Collections.stream()或者Collection.parallelStream()方法来创建一个流对象。下面的章节会解释这个最常用的操作。 </p><p>Filter </p><p>Filter接受一个predicate接口类型的变量，并将所有流对象中的元素进行过滤。该操作是一个中间操作，因此它允许我们在返回结果的基 础上再进行其他的流操作（forEach）。ForEach接受一个function接口类型的变量，用来执行对每一个元素的操作。ForEach是一个 中止操作。它不返回流，所以我们不能再调用其他的流操作。 </p><p>Java代码<br>stringCollection<br>    .stream()<br>    .filter((s) -&gt; s.startsWith(“a”))<br>    .forEach(System.out::println);  </p><p>// “aaa2”, “aaa1”  </p><p>Sorted </p><p>Sorted是一个中间操作，能够返回一个排过序的流对象的视图。流对象中的元素会默认按照自然顺序进行排序，除非你自己指定一个Comparator接口来改变排序规则。 </p><p>Java代码<br>stringCollection<br>    .stream()<br>    .sorted()<br>    .filter((s) -&gt; s.startsWith(“a”))<br>    .forEach(System.out::println);  </p><p>// “aaa1”, “aaa2”  </p><p>一定要记住，sorted只是创建一个流对象排序的视图，而不会改变原来集合中元素的顺序。原来string集合中的元素顺序是没有改变的。 </p><p>Java代码<br>System.out.println(stringCollection);<br>// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1  </p><p>Map </p><p>map是一个对于流对象的中间操作，通过给定的方法，它能够把流对象中的每一个元素对应到另外一个对象上。下面的例子就演示了如何把每个 string都转换成大写的string. 不但如此，你还可以把每一种对象映射成为其他类型。对于带泛型结果的流对象，具体的类型还要由传递给map的泛型方法来决定。 </p><p>Java代码<br>stringCollection<br>    .stream()<br>    .map(String::toUpperCase)<br>    .sorted((a, b) -&gt; b.compareTo(a))<br>    .forEach(System.out::println);  </p><p>// “DDD2”, “DDD1”, “CCC”, “BBB3”, “BBB2”, “AAA2”, “AAA1”  </p><p>Match </p><p>匹配操作有多种不同的类型，都是用来判断某一种规则是否与流对象相互吻合的。所有的匹配操作都是终结操作，只返回一个boolean类型的结果。 </p><p>Java代码<br>boolean anyStartsWithA =<br>    stringCollection<br>        .stream()<br>        .anyMatch((s) -&gt; s.startsWith(“a”));  </p><p>System.out.println(anyStartsWithA);      // true  </p><p>boolean allStartsWithA =<br>    stringCollection<br>        .stream()<br>        .allMatch((s) -&gt; s.startsWith(“a”));  </p><p>System.out.println(allStartsWithA);      // false  </p><p>boolean noneStartsWithZ =<br>    stringCollection<br>        .stream()<br>        .noneMatch((s) -&gt; s.startsWith(“z”));  </p><p>System.out.println(noneStartsWithZ);      // true  </p><p>Count </p><p>Count是一个终结操作，它的作用是返回一个数值，用来标识当前流对象中包含的元素数量。 </p><p>Java代码<br>long startsWithB =<br>    stringCollection<br>        .stream()<br>        .filter((s) -&gt; s.startsWith(“b”))<br>        .count();  </p><p>System.out.println(startsWithB);    // 3  </p><p>Reduce </p><p>该操作是一个终结操作，它能够通过某一个方法，对元素进行削减操作。该操作的结果会放在一个Optional变量里返回。 </p><p>Java代码<br>Optional<string> reduced =<br>    stringCollection<br>        .stream()<br>        .sorted()<br>        .reduce((s1, s2) -&gt; s1 + “#” + s2);  </string></p><p>reduced.ifPresent(System.out::println);<br>// “aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2”  </p><p>Parallel Streams Top<br>像上面所说的，流操作可以是顺序的，也可以是并行的。顺序操作通过单线程执行，而并行操作则通过多线程执行。 </p><p>下面的例子就演示了如何使用并行流进行操作来提高运行效率，代码非常简单。 </p><p>首先我们创建一个大的list，里面的元素都是唯一的： </p><p>Java代码<br>int max = 1000000;<br>List<string> values = new ArrayList&lt;&gt;(max);<br>for (int i = 0; i &lt; max; i++) {<br>    UUID uuid = UUID.randomUUID();<br>    values.add(uuid.toString());<br>}  </string></p><p>现在，我们测量一下对这个集合进行排序所使用的时间。 </p><p>顺序排序 </p><p>Java代码<br>long t0 = System.nanoTime();  </p><p>long count = values.stream().sorted().count();<br>System.out.println(count);  </p><p>long t1 = System.nanoTime();  </p><p>long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);<br>System.out.println(String.format(“sequential sort took: %d ms”, millis));  </p><p>// sequential sort took: 899 ms  </p><p>并行排序 </p><p>Java代码<br>long t0 = System.nanoTime();  </p><p>long count = values.parallelStream().sorted().count();<br>System.out.println(count);  </p><p>long t1 = System.nanoTime();  </p><p>long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);<br>System.out.println(String.format(“parallel sort took: %d ms”, millis));  </p><p>// parallel sort took: 472 ms  </p><p>如你所见，所有的代码段几乎都相同，唯一的不同就是把stream()改成了parallelStream(), 结果并行排序快了50%。 </p><p>Map Top<br>正如前面已经提到的那样，map是不支持流操作的。而更新后的map现在则支持多种实用的新方法，来完成常规的任务。 </p><p>Java代码<br>Map<integer, string=""> map = new HashMap&lt;&gt;();  </integer,></p><p>for (int i = 0; i &lt; 10; i++) {<br>    map.putIfAbsent(i, “val” + i);<br>}  </p><p>map.forEach((id, val) -&gt; System.out.println(val));  </p><p>上面的代码风格是完全自解释的：putIfAbsent避免我们将null写入；forEach接受一个消费者对象，从而将操作实施到每一个map中的值上。 </p><p>下面的这个例子展示了如何使用函数来计算map的编码： </p><p>Java代码<br>map.computeIfPresent(3, (num, val) -&gt; val + num);<br>map.get(3);             // val33  </p><p>map.computeIfPresent(9, (num, val) -&gt; null);<br>map.containsKey(9);     // false  </p><p>map.computeIfAbsent(23, num -&gt; “val” + num);<br>map.containsKey(23);    // true  </p><p>map.computeIfAbsent(3, num -&gt; “bam”);<br>map.get(3);             // val33  </p><p>接下来，我们将学习，当给定一个key值时，如何把一个实例从对应的key中移除： </p><p>Java代码<br>map.remove(3, “val3”);<br>map.get(3);             // val33  </p><p>map.remove(3, “val33”);<br>map.get(3);             // null  </p><p>另一个有用的方法： </p><p>Java代码<br>map.getOrDefault(42, “not found”);  // not found  </p><p>将map中的实例合并也是非常容易的： </p><p>Java代码<br>map.merge(9, “val9”, (value, newValue) -&gt; value.concat(newValue));<br>map.get(9);             // val9  </p><p>map.merge(9, “concat”, (value, newValue) -&gt; value.concat(newValue));<br>map.get(9);             // val9concat  </p><p>合并操作先看map中是否没有特定的key/value存在，如果是，则把key/value存入map，否则merging函数就会被调用，对现有的数值进行修改。 </p><p>时间日期API Top<br>Java 8 包含了全新的时间日期API，这些功能都放在了java.time包下。新的时间日期API是基于Joda-Time库开发的，但是也不尽相同。下面的例子就涵盖了大多数新的API的重要部分。 </p><p>Clock </p><p>Clock提供了对当前时间和日期的访问功能。Clock是对当前时区敏感的，并可用于替代 System.currentTimeMillis()方法来获取当前的毫秒时间。当前时间线上的时刻可以用Instance类来表示。Instance 也能够用于创建原先的java.util.Date对象。 </p><p>Java代码<br>Clock clock = Clock.systemDefaultZone();<br>long millis = clock.millis();  </p><p>Instant instant = clock.instant();<br>Date legacyDate = Date.from(instant);   // legacy java.util.Date  </p><p>Timezones </p><p>时区类可以用一个ZoneId来表示。时区类的对象可以通过静态工厂方法方便地获取。时区类还定义了一个偏移量，用来在当前时刻或某时间与目标时区时间之间进行转换。 </p><p>Java代码<br>System.out.println(ZoneId.getAvailableZoneIds());<br>// prints all available timezone ids  </p><p>ZoneId zone1 = ZoneId.of(“Europe/Berlin”);<br>ZoneId zone2 = ZoneId.of(“Brazil/East”);<br>System.out.println(zone1.getRules());<br>System.out.println(zone2.getRules());  </p><p>// ZoneRules[currentStandardOffset=+01:00]<br>// ZoneRules[currentStandardOffset=-03:00]  </p><p>LocalTime </p><p>本地时间类表示一个没有指定时区的时间，例如，10 p.m.或者17：30:15，下面的例子会用上面的例子定义的时区创建两个本地时间对象。然后我们会比较两个时间，并计算它们之间的小时和分钟的不同。 </p><p>Java代码<br>LocalTime now1 = LocalTime.now(zone1);<br>LocalTime now2 = LocalTime.now(zone2);  </p><p>System.out.println(now1.isBefore(now2));  // false  </p><p>long hoursBetween = ChronoUnit.HOURS.between(now1, now2);<br>long minutesBetween = ChronoUnit.MINUTES.between(now1, now2);  </p><p>System.out.println(hoursBetween);       // -3<br>System.out.println(minutesBetween);     // -239  </p><p>LocalTime是由多个工厂方法组成，其目的是为了简化对时间对象实例的创建和操作，包括对时间字符串进行解析的操作。 </p><p>Java代码<br>LocalTime late = LocalTime.of(23, 59, 59);<br>System.out.println(late);       // 23:59:59  </p><p>DateTimeFormatter germanFormatter =<br>    DateTimeFormatter<br>        .ofLocalizedTime(FormatStyle.SHORT)<br>        .withLocale(Locale.GERMAN);  </p><p>LocalTime leetTime = LocalTime.parse(“13:37”, germanFormatter);<br>System.out.println(leetTime);   // 13:37  </p><p>LocalDate </p><p>本地时间表示了一个独一无二的时间，例如：2014-03-11。这个时间是不可变的，与LocalTime是同源的。下面的例子演示了如何通过加减日，月，年等指标来计算新的日期。记住，每一次操作都会返回一个新的时间对象。 </p><p>Java代码<br>LocalDate today = LocalDate.now();<br>LocalDate tomorrow = today.plus(1, ChronoUnit.DAYS);<br>LocalDate yesterday = tomorrow.minusDays(2);  </p><p>LocalDate independenceDay = LocalDate.of(2014, Month.JULY, 4);<br>DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();<br>System.out.println(dayOfWeek);    // FRIDAY<span style="font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">Parsing a LocalDate from a string is just as simple as parsing a LocalTime:</span>  </p><p>解析字符串并形成LocalDate对象，这个操作和解析LocalTime一样简单。 </p><p>Java代码<br>DateTimeFormatter germanFormatter =<br>    DateTimeFormatter<br>        .ofLocalizedDate(FormatStyle.MEDIUM)<br>        .withLocale(Locale.GERMAN);  </p><p>LocalDate xmas = LocalDate.parse(“24.12.2014”, germanFormatter);<br>System.out.println(xmas);   // 2014-12-24  </p><p>LocalDateTime </p><p>LocalDateTime表示的是日期-时间。它将刚才介绍的日期对象和时间对象结合起来，形成了一个对象实例。LocalDateTime是不可变的，与LocalTime和LocalDate的工作原理相同。我们可以通过调用方法来获取日期时间对象中特定的数据域。 </p><p>Java代码<br>LocalDateTime sylvester = LocalDateTime.of(2014, Month.DECEMBER, 31, 23, 59, 59);  </p><p>DayOfWeek dayOfWeek = sylvester.getDayOfWeek();<br>System.out.println(dayOfWeek);      // WEDNESDAY  </p><p>Month month = sylvester.getMonth();<br>System.out.println(month);          // DECEMBER  </p><p>long minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);<br>System.out.println(minuteOfDay);    // 1439  </p><p>如果再加上的时区信息，LocalDateTime能够被转换成Instance实例。Instance能够被转换成以前的java.util.Date对象。 </p><p>Java代码<br>Instant instant = sylvester<br>        .atZone(ZoneId.systemDefault())<br>        .toInstant();  </p><p>Date legacyDate = Date.from(instant);<br>System.out.println(legacyDate);     // Wed Dec 31 23:59:59 CET 2014  </p><p>格式化日期-时间对象就和格式化日期对象或者时间对象一样。除了使用预定义的格式以外，我们还可以创建自定义的格式化对象，然后匹配我们自定义的格式。 </p><p>Java代码<br>DateTimeFormatter formatter =<br>    DateTimeFormatter<br>        .ofPattern(“MMM dd, yyyy - HH:mm”);  </p><p>LocalDateTime parsed = LocalDateTime.parse(“Nov 03, 2014 - 07:13”, formatter);<br>String string = formatter.format(parsed);<br>System.out.println(string);     // Nov 03, 2014 - 07:13  </p><p>不同于java.text.NumberFormat，新的DateTimeFormatter类是不可变的，也是线程安全的。 </p><p>更多的细节，请看这里 </p><p>Annotations Top<br>Java 8中的注解是可重复的。让我们直接深入看看例子，弄明白它是什么意思。 </p><p>首先，我们定义一个包装注解，它包括了一个实际注解的数组 </p><p>Java代码<br>@interface Hints {<br>    Hint[] value();<br>}  </p><p>@Repeatable(Hints.class)<br>@interface Hint {<br>    String value();<br>}  </p><p>只要在前面加上注解名：@Repeatable，Java 8 允许我们对同一类型使用多重注解： </p><p>变体1：使用注解容器（老方法）： </p><p>Java代码<br>@Hints({@Hint(“hint1”), @Hint(“hint2”)})<br>class Person {}  </p><p>变体2：使用可重复注解（新方法）： </p><p>Java代码<br>@Hint(“hint1”)<br>@Hint(“hint2”)<br>class Person {}  </p><p>使用变体2，Java编译器能够在内部自动对@Hint进行设置。这对于通过反射来读取注解信息来说，是非常重要的。 </p><p>Java代码<br>Hint hint = Person.class.getAnnotation(Hint.class);<br>System.out.println(hint);                   // null  </p><p>Hints hints1 = Person.class.getAnnotation(Hints.class);<br>System.out.println(hints1.value().length);  // 2  </p><p>Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class);<br>System.out.println(hints2.length);          // 2  </p><p>尽管我们绝对不会在Person类上声明@Hints注解，但是它的信息仍然可以通过getAnnotation(Hints.class)来读 取。并且，getAnnotationsByType方法会更方便，因为它赋予了所有@Hints注解标注的方法直接的访问权限。 </p><p>Java代码<br>@Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})<br>@interface MyAnnotation {}  </p><p>总结 Top<br>Java 8编程指南就到此告一段落。当然，还有很多内容需要进一步研究和说明。这就需要靠读者您来对JDK 8进行探究了，例如：Arrays.parallelSort, StampedLock和CompletableFuture等等 ———— 我这里只是举几个例子而已。 </p><p>我希望这个博文能够对您有所帮助，也希望您阅读愉快。完整的教程源代码放在了GitHub上。您可以尽情地fork，并请通过Twitter告诉我您的反馈。 </p><p>原文链接： winterbe 翻译： ImportNew.com - 黄小非 </p><h2 id="译文链接：-http-www-importnew-com-10360-html"><a href="#译文链接：-http-www-importnew-com-10360-html" class="headerlink" title="译文链接： http://www.importnew.com/10360.html"></a>译文链接： <a href="http://www.importnew.com/10360.html" target="_blank" rel="noopener">http://www.importnew.com/10360.html</a></h2><p>加快OpenJDK的开发速度：继2014年3月份发布了Java 8之后，我们进入下一个两年的发布周期。 Java 9预计在2016年发布，并且已经公布了JEP(JDK改进提议)中的前期列表。同时，我们已经把一些新特性整理到了JSR(Java规范请求)，还有提 出了一些希望包括在新版本中的其他特性。</p><p>这些重要的特性都包括在Jigsaw项目中。显著的性能改善和期待已久的API包括：进程API更新，JSON将成为java.util的一部分，货币处理API对于想处在技术最前沿的你，可从这里获得Java 9的初期版本。</p><p>被接受的特性</p><ol><li>Jigsaw 项目;模块化源码</li></ol><p>Jigsaw项目是为了模块化Java代码、将JRE分成可相互协作的组件，这也是Java 9 众多特色种的一个。JEP是迈向Jigsaw四步中的第一步，它不会改变JRE和JDK的真实结构。JEP是为了模块化JDK源代码，让编译系统能够模块 编译并在构建时检查模块边界。这个项目原本是随Java 8发布的，但由于推迟，所以将把它加到Java 9.</p><p>一旦它完成，它可能允许根据一个项目需求自定义组件从而减少rt.jar的大小。在JDK 7 和JDK 8的rt.jar包中有大约20,000个类，但有很多类在一些特定的环境里面并没有被用到(即使在Java 8的紧凑分布特性中已经包含了一部分解决方法也存在着类冗余)。这么做是为了能让Java能够容易应用到小型计算设备(比如网络设备)中，提高它的安全和 性能，同时也能让开发者更容易构建和维护这些类库。</p><ol><li>简化进程API </li></ol><p>截止到目前，Java控制与管理系统进程的能力是有限的。举个例子，现在为了简便获取你程序的进程PID，你要么调用本地程序要么要自己使用一些变通方案。更多的是，每个（系统）平台需要有一个不同实现来确保你能获得正确的结果。 </p><p>期望代码能获取Linux PIDS，现在是如下方式： </p><p>在Java 9中，可以变换成如下方式（支持所有的操作系统）： </p><p>这次更新将会扩展Java与操作系统的交互能力：新增一些新的直接明了的方法去处理PIDs，进程名字和状态以及枚举多个JVM和进程以及更多事情。 </p><ol><li>轻量级 JSON API </li></ol><p>目前有多种处理JSON的Java工具，但JSON API 独到之处在于JSON API将作为Java语言的一部分，轻量并且运用Java 8的新特性。它将放在java.util包里一起发布(但在JSR 353里面的JSON是用第三方包或者其他的方法处理的). </p><ol><li>钱和货币的API </li></ol><p>在Java 8引进了日期和时间的API之后, Java 9引入了新的货币API, 用以表示货币, 支持币种之间的转换和各种复杂运算. 关于这个项目的具体情况, 请访问<a href="https://github.com/JavaMoney,里面已经给出了使用说明和示例" target="_blank" rel="noopener">https://github.com/JavaMoney,里面已经给出了使用说明和示例</a>, 以下是几个重要的例子: </p><p>更多关于 JSR 354的内容 </p><ol><li>改善锁争用机制</li></ol><p>锁争用是限制许多Java多线程应用性能的瓶颈. 新的机制在改善Java对象监视器的性能方面已经得到了多种基准(benchmark)的验证, 其中包括Volano. 测试中通讯服务器开放了海量的进程来连接客户端, 其中有很多连接都申请同一个资源, 以此模拟重负荷日常应用.</p><p>通过诸如此类的压力测试我们可以估算JVM的极限吞吐量(每秒的消息数量). JEP在22种不同的测试中都得到了出色的成绩, 新的机制如果能在Java 9中得到应用的话, 应用程序的性能将会大大提升.</p><p>关于JEP 143的更多内容 </p><ol><li>代码分段缓存</li></ol><p>Java 9的另一个性能提升来自于JIT(Just-in-time)编译器. 当某段代码被大量重复执行的时候, 虚拟机会把这段代码编译成机器码(native code)并储存在代码缓存里面, 进而通过访问缓存中不同分段的代码来提升编译器的效率.</p><p>和原来的单一缓存区域不同的是, 新的代码缓存根据代码自身的生命周期而分为三种:</p><p>永驻代码(JVM 内置 / 非方法代码)<br>短期代码(仅在某些条件下适用的配置性(profiled)代码)<br>长期代码(非配置性代码)<br>缓存分段会在各个方面提升程序的性能, 比如做垃圾回收扫描的时候可以直接跳过非方法代码(永驻代码), 从而提升效率.</p><p>更多关于JEP 197的内容 </p><ol><li>智能Java编译, 第二阶段</li></ol><p>智能Java编译工具sjavac的第一阶段开始于JEP 139这个项目, 用于在多核处理器上提升JDK的编译速度. 现在这个项目已经进入第二阶段(JEP 199), 目的是改进sjavac并让其成为取代目前JDK编译工具javac的Java默认的通用编译工具.</p><p>其他值得期待的内容:</p><ol><li>HTTP 2.0客户端</li></ol><p>HTTP 2.0标准虽然还没正式发布, 但是已经进入了最终审查阶段, 预计可以在Java 9发布之前审查完毕. JEP 110将会重新定义并实现一个全新的Java HTTP客户端, 用来取代现在的HttpURLConnection, 同时也会实现HTTP 2.0和网络接口(原文websockets). 它现在还没被JEP正式认可但我们希望在Java 9中包含这一项目的内容.</p><p>官方的HTTP 2.0 RFC(Request for Comments, 官方技术讨论/会议记录等等的一系列文档记录)预订于2015年2月发布, 它是基于Google发布的SPDY(Speedy, 快速的)协议. 基于SPDY协议的网络相对于基于HTTP 1.1协议的网络有11.81%到47.7%之间的显著提速, 现在已经有浏览器实现了这个协议.</p><ol><li>Kulla计划: Java的REPL实现</li></ol><p>这个取名为Kulla的项目最近宣布将于2015年4月整合测试, 虽然已经不太有希望能赶上Java 9的发布, 但如果进度快的话或许刚好能赶上. 现在Java并没有来自官方的REPL(Read-Eval-Print-Loop)方式, 也就是说现在如果你想要跑几行Java代码做一个快速的测试, 你仍然需要把这几行代码封装在项目或者方法里面. 虽然在一些流行的IDE里面有Java REPL工具, 但它们并没有官方支持, 而Kulla项目或许就能成为Java官方发布的REPL解决方案. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDK-1-0&quot;&gt;&lt;a href=&quot;#JDK-1-0&quot; class=&quot;headerlink&quot; title=&quot;JDK 1.0&quot;&gt;&lt;/a&gt;JDK 1.0&lt;/h1&gt;&lt;p&gt;开发代号为Oak（橡树），于1996-01-23发行。&lt;/p&gt;
&lt;h1 id=&quot;JDK-1-1&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="java" scheme="http://github.lushunde.com/categories/java/"/>
    
    
      <category term="JDK新特性" scheme="http://github.lushunde.com/tags/JDK%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 安装 Nginx TCP HTTP</title>
    <link href="http://github.lushunde.com/2018/06/13/centos7-%E5%AE%89%E8%A3%85-nginx-TCP-HTTP/"/>
    <id>http://github.lushunde.com/2018/06/13/centos7-安装-nginx-TCP-HTTP/</id>
    <published>2018-06-13T11:55:38.000Z</published>
    <updated>2018-06-13T12:02:41.883Z</updated>
    
    <content type="html"><![CDATA[<p>nginx 正常安装 仅支持 http和https的负载均衡和反向代理 相关文档：</p><blockquote><p>由于现在需要使用TCP的负载均衡和反向代理功能，所以特别记录了这篇安装文档，本文中 TCP 模块添加在其中</p></blockquote><h1 id="CentOS-7-下安装-Nginx"><a href="#CentOS-7-下安装-Nginx" class="headerlink" title="CentOS 7 下安装 Nginx"></a>CentOS 7 下安装 Nginx</h1><h2 id="查看是否安装Nginx"><a href="#查看是否安装Nginx" class="headerlink" title="查看是否安装Nginx"></a>查看是否安装Nginx</h2><p><strong>安装之前，最好检查一下是否已经安装有nginx</strong><br><code>[root@CENTOS7-TEST1 sbin]# find -name nginx</code><br><strong>如果系统已经安装了nginx，那么就先卸载如果系统已经安装了nginx，那么就先卸载</strong><br><code>[root@CENTOS7-TEST1 /]# yum remove nginx</code></p><h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><p>Nginx 是 C语言 开发，建议在 Linux 上运行，当然，也可以安装 Windows 版本，本篇则使用 CentOS 7 作为安装环境。</p><h3 id="gcc-安装"><a href="#gcc-安装" class="headerlink" title="gcc 安装"></a>gcc 安装</h3><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx]# yum install gcc-c++</span><br></pre></td></tr></table></figure></p><h3 id="PCRE-pcre-devel-安装"><a href="#PCRE-pcre-devel-安装" class="headerlink" title="PCRE pcre-devel 安装"></a>PCRE pcre-devel 安装</h3><blockquote><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx]# yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="zlib-安装"><a href="#zlib-安装" class="headerlink" title="zlib 安装"></a>zlib 安装</h3><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx]# yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure></p><h3 id="OpenSSL-安装"><a href="#OpenSSL-安装" class="headerlink" title="OpenSSL 安装"></a>OpenSSL 安装</h3><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx]# yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></p><p>注：yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel        ## 一次性安装以上依赖包  </p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="使用wget命令下载（推荐）。"><a href="#使用wget命令下载（推荐）。" class="headerlink" title="使用wget命令下载（推荐）。"></a>使用wget命令下载（推荐）。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx]# wget https://nginx.org/download/nginx-1.13.9.tar.gz</span><br></pre></td></tr></table></figure><p>我下载的是1.13.9版本，这个是目前的稳定版。</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx]# tar -zxvf nginx-1.13.9.tar.gz  &amp;&amp; cd nginx-1.13.9</span><br></pre></td></tr></table></figure><h3 id="配置安装-a、b两种选择其一即可"><a href="#配置安装-a、b两种选择其一即可" class="headerlink" title="配置安装 a、b两种选择其一即可"></a>配置安装 a、b两种选择其一即可</h3><h4 id="a-配置-默认安装（只支持http和https）"><a href="#a-配置-默认安装（只支持http和https）" class="headerlink" title="a 配置 默认安装（只支持http和https）"></a>a 配置 默认安装（只支持http和https）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx-1.13.9]# ./configure</span><br></pre></td></tr></table></figure><h4 id="b-配置-添加额外的-TCP-模块"><a href="#b-配置-添加额外的-TCP-模块" class="headerlink" title="b 配置 添加额外的 TCP 模块"></a>b 配置 添加额外的 TCP 模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx-1.13.9]# ./configure --with-stream --with-stream_ssl_module --with-http_stub_status_module</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx]# make</span><br><span class="line">[root@CENTOS7-TEST1 nginx]# make install</span><br></pre></td></tr></table></figure><p><strong>查找安装路径：</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx-1.13.9]# whereis nginx</span><br><span class="line">nginx: /usr/local/nginx</span><br></pre></td></tr></table></figure></p><h2 id="配置文件-对应上面配置安装来配置文件"><a href="#配置文件-对应上面配置安装来配置文件" class="headerlink" title="配置文件 对应上面配置安装来配置文件"></a>配置文件 对应上面配置安装来配置文件</h2><h3 id="a-默认安装不支持TCP的配置文件不需要修改，原配置文件即可"><a href="#a-默认安装不支持TCP的配置文件不需要修改，原配置文件即可" class="headerlink" title="a 默认安装不支持TCP的配置文件不需要修改，原配置文件即可"></a>a 默认安装不支持TCP的配置文件不需要修改，原配置文件即可</h3><h3 id="b-支持TCP的配置文件配置，添加TCP"><a href="#b-支持TCP的配置文件配置，添加TCP" class="headerlink" title="b 支持TCP的配置文件配置，添加TCP"></a>b 支持TCP的配置文件配置，添加TCP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;                  ## stream模块，就跟http模块一样  </span><br><span class="line">        server &#123;             ## 里面乐意有多个监听服务</span><br><span class="line">          listen 12345;  </span><br><span class="line">          proxy_pass 192.168.1.2:3306;  </span><br><span class="line">        &#125;  </span><br><span class="line">        server &#123;  </span><br><span class="line">          listen 12346;  </span><br><span class="line">          proxy_pass 192.168.9.1.3:3306;  </span><br><span class="line">        &#125;  </span><br><span class="line">        ## 在tcp请求代理中，也是可以使用负载均衡的upstream的  </span><br><span class="line">        upstream mysql&#123;  </span><br><span class="line">            server 192.168.9.3:3306;  </span><br><span class="line">            server 192.168.9.4:3306;  </span><br><span class="line">        &#125;  </span><br><span class="line">        server &#123;  </span><br><span class="line">            listen 33333;  </span><br><span class="line">            proxy_pass myqsl;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动、停止nginx"><a href="#启动、停止nginx" class="headerlink" title="启动、停止nginx"></a>启动、停止nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 nginx-1.13.9]# cd /usr/local/nginx/sbin/</span><br><span class="line">[root@CENTOS7-TEST1 sbin]# ./nginx</span><br><span class="line">[root@CENTOS7-TEST1 sbin]# ./nginx -s stop  #此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</span><br><span class="line">[root@CENTOS7-TEST1 sbin]# ./nginx</span><br><span class="line">[root@CENTOS7-TEST1 sbin]# ./nginx -s quit   #此方式停止步骤是待nginx进程处理任务完毕进行停止</span><br><span class="line">[root@CENTOS7-TEST1 sbin]# ./nginx</span><br><span class="line">[root@CENTOS7-TEST1 sbin]# ./nginx -s reload</span><br><span class="line">[root@CENTOS7-TEST1 sbin]# ps aux|grep nginx  #查询nginx进程</span><br><span class="line">root       3848  0.0  0.0  20496  1308 ?        Ss   11:19   0:00 nginx: master process ./nginx</span><br><span class="line">nobody     3851  0.0  0.0  20948  1440 ?        S    11:19   0:00 nginx: worker process</span><br><span class="line">root       3853  0.0  0.0 112660   972 pts/0    S+   11:20   0:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><h3 id="即在rc-local增加启动代码就可以了。"><a href="#即在rc-local增加启动代码就可以了。" class="headerlink" title="即在rc.local增加启动代码就可以了。"></a>即在rc.local增加启动代码就可以了。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 sbin]# vi /etc/rc.local</span><br><span class="line"> 增加一行 /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="设置执行权限：-根据需求"><a href="#设置执行权限：-根据需求" class="headerlink" title="设置执行权限：[根据需求]"></a>设置执行权限：[根据需求]</h3><p><code>[root@CENTOS7-TEST1 sbin]# chmod 755 rc.local</code></p><h2 id="添加Nginx到系统服务"><a href="#添加Nginx到系统服务" class="headerlink" title="添加Nginx到系统服务"></a>添加Nginx到系统服务</h2><h3 id="创建nginx启动命令脚本"><a href="#创建nginx启动命令脚本" class="headerlink" title="创建nginx启动命令脚本"></a>创建nginx启动命令脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# vi /etc/init.d/nginx</span><br></pre></td></tr></table></figure><h3 id="插入以下内容-注意修改PATH和NAME字段-匹配自己的安装路径"><a href="#插入以下内容-注意修改PATH和NAME字段-匹配自己的安装路径" class="headerlink" title="插入以下内容, 注意修改PATH和NAME字段, 匹配自己的安装路径"></a>插入以下内容, 注意修改PATH和NAME字段, 匹配自己的安装路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig: - 85 15</span></span><br><span class="line">PATH=/usr/local/nginx</span><br><span class="line">DESC="nginx daemon"</span><br><span class="line">NAME=nginx</span><br><span class="line">DAEMON=$PATH/sbin/$NAME</span><br><span class="line">CONFIGFILE=$PATH/conf/$NAME.conf</span><br><span class="line">PIDFILE=$PATH/logs/$NAME.pid</span><br><span class="line">SCRIPTNAME=/etc/init.d/$NAME</span><br><span class="line">set -e</span><br><span class="line">[ -x "$DAEMON" ] || exit 0</span><br><span class="line">do_start() &#123;</span><br><span class="line"><span class="meta">$</span><span class="bash">DAEMON -c <span class="variable">$CONFIGFILE</span> || <span class="built_in">echo</span> -n <span class="string">"nginx already running"</span></span></span><br><span class="line">&#125;</span><br><span class="line">do_stop() &#123;</span><br><span class="line"><span class="meta">$</span><span class="bash">DAEMON -s stop || <span class="built_in">echo</span> -n <span class="string">"nginx not running"</span></span></span><br><span class="line">&#125;</span><br><span class="line">do_reload() &#123;</span><br><span class="line"><span class="meta">$</span><span class="bash">DAEMON -s reload || <span class="built_in">echo</span> -n <span class="string">"nginx can't reload"</span></span></span><br><span class="line">&#125;</span><br><span class="line">case "$1" in</span><br><span class="line">start)</span><br><span class="line">echo -n "Starting $DESC: $NAME"</span><br><span class="line">do_start</span><br><span class="line">echo "."</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">echo -n "Stopping $DESC: $NAME"</span><br><span class="line">do_stop</span><br><span class="line">echo "."</span><br><span class="line">;;</span><br><span class="line">reload|graceful)</span><br><span class="line">echo -n "Reloading $DESC configuration..."</span><br><span class="line">do_reload</span><br><span class="line">echo "."</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">echo -n "Restarting $DESC: $NAME"</span><br><span class="line">do_stop</span><br><span class="line">do_start</span><br><span class="line">echo "."</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo "Usage: $SCRIPTNAME &#123;start|stop|reload|restart&#125;" &gt;&amp;2</span><br><span class="line">exit 3</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h3 id="设置执行权限"><a href="#设置执行权限" class="headerlink" title="设置执行权限"></a>设置执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# chmod a+x /etc/init.d/nginx</span><br></pre></td></tr></table></figure><h3 id="注册成服务"><a href="#注册成服务" class="headerlink" title="注册成服务"></a>注册成服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# chkconfig --add nginx</span><br></pre></td></tr></table></figure><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# chkconfig nginx on</span><br></pre></td></tr></table></figure><h3 id="重启-查看nginx服务是否自动启动"><a href="#重启-查看nginx服务是否自动启动" class="headerlink" title="重启, 查看nginx服务是否自动启动"></a>重启, 查看nginx服务是否自动启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# shutdown -h 0 -rn</span><br><span class="line">[root@CENTOS7-TEST1 /]# netstat -apn|grep nginx</span><br></pre></td></tr></table></figure><h3 id="对nginx服务执行停止-启动-重新读取配置文件操作"><a href="#对nginx服务执行停止-启动-重新读取配置文件操作" class="headerlink" title="对nginx服务执行停止/启动/重新读取配置文件操作"></a>对nginx服务执行停止/启动/重新读取配置文件操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动nginx服务</span></span><br><span class="line">systemctl start nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash">停止nginx服务</span></span><br><span class="line">systemctl stop nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash">重启nginx服务</span></span><br><span class="line">systemctl restart nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash">重新读取nginx配置(这个最常用, 不用停止nginx服务就能使修改的配置生效)</span></span><br><span class="line">systemctl reload nginx.service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx 正常安装 仅支持 http和https的负载均衡和反向代理 相关文档：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于现在需要使用TCP的负载均衡和反向代理功能，所以特别记录了这篇安装文档，本文中 TCP 模块添加在其中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1
      
    
    </summary>
    
      <category term="centos7" scheme="http://github.lushunde.com/categories/centos7/"/>
    
    
      <category term="nginx" scheme="http://github.lushunde.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装 OpenFalcon单机版</title>
    <link href="http://github.lushunde.com/2018/05/10/centos7%E5%AE%89%E8%A3%85-OpenFalcon%E5%8D%95%E6%9C%BA%E7%89%88/"/>
    <id>http://github.lushunde.com/2018/05/10/centos7安装-OpenFalcon单机版/</id>
    <published>2018-05-10T14:51:43.000Z</published>
    <updated>2018-05-10T14:54:40.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1-跟新yum源"><a href="#1-跟新yum源" class="headerlink" title="1.跟新yum源"></a>1.跟新yum源</h3><pre><code>yum clean allyum makecacheyum update -y</code></pre><h3 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h3><pre><code>因为mysql的脚本要么使用git下载，要么上传下载好的【上传可不安装】yum install -y git</code></pre><h3 id="3-安装redis"><a href="#3-安装redis" class="headerlink" title="3.安装redis"></a>3.安装redis</h3><pre><code>如果没有装epel，会提示No package redis available，也就是没有安装包可用，因为官方yum和阿里yum可能都没有redis，故只能通过fedora的epel仓库来安装 命令：yum install -y epel-release安装redisyum install redis -y启动redissystemctl start redis设置redis开机启动 systemctl enable redis可以用下面的语句查看redis是否开启systemctl status redis</code></pre><h3 id="4-安装mysql"><a href="#4-安装mysql" class="headerlink" title="4.安装mysql"></a>4.安装mysql</h3><pre><code>因为centos7后系统使用 mariadb 替换了 mysql，所以先卸载mariadb 在安装mysql</code></pre><h4 id="卸载mariadb-先查询，在强力删除"><a href="#卸载mariadb-先查询，在强力删除" class="headerlink" title="卸载mariadb  先查询，在强力删除"></a>卸载mariadb  先查询，在强力删除</h4><pre><code>rpm -qa | grep mariadbrpm -e --nodeps mariadb-libs-5.5.50-1.el7_2.x86_64</code></pre><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p><strong>下载repo源</strong><br>    wget <a href="http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm" target="_blank" rel="noopener">http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</a><br><strong>安装该rpm包</strong>（安装这个包后，会获得两个mysql的yum repo源：/etc/yum.repos.d/mysql-community.repo，/etc/yum.repos.d/mysql-community-source.repo）<br>    rpm -ivh mysql-community-release-el7-5.noarch.rpm<br><strong>安装mysql</strong><br>    yum install mysql-server -y<br><strong>启动mysql</strong><br>    systemctl start mysql<br><strong>查看mysql是否开启</strong><br>    systemctl status mysql</p><h3 id="5-下载"><a href="#5-下载" class="headerlink" title="5.下载"></a>5.下载</h3><h4 id="数据库脚本"><a href="#数据库脚本" class="headerlink" title="数据库脚本"></a>数据库脚本</h4><pre><code>cd /tmp/ &amp;&amp; git clone https://github.com/open-falcon/falcon-plus.git cd /tmp/falcon-plus/scripts/mysql/db_schema/mysql -h 127.0.0.1 -u root -p &lt; 1_uic-db-schema.sqlmysql -h 127.0.0.1 -u root -p &lt; 2_portal-db-schema.sqlmysql -h 127.0.0.1 -u root -p &lt; 3_dashboard-db-schema.sqlmysql -h 127.0.0.1 -u root -p &lt; 4_graph-db-schema.sqlmysql -h 127.0.0.1 -u root -p &lt; 5_alarms-db-schema.sqlrm -rf /tmp/falcon-plus/</code></pre><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><pre><code>wget https://github.com/open-falcon/falcon-plus/archive/master.zip</code></pre><h2 id="后台安装"><a href="#后台安装" class="headerlink" title="后台安装"></a>后台安装</h2><h4 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h4><pre><code>export FALCON_HOME=/home/workexport WORKSPACE=$FALCON_HOME/open-falconmkdir -p $WORKSPACE</code></pre><h4 id="解压二进制包"><a href="#解压二进制包" class="headerlink" title="解压二进制包"></a>解压二进制包</h4><pre><code>tar -xzvf open-falcon-v0.2.0.tar.gz -C $WORKSPACE在一台机器上启动所有的后端组件</code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><pre><code>cd $WORKSPACE./open-falcon start</code></pre><h4 id="检查所有模块的启动状况"><a href="#检查所有模块的启动状况" class="headerlink" title="检查所有模块的启动状况"></a>检查所有模块的启动状况</h4><pre><code>./open-falcon check</code></pre><h4 id="更多的命令行工具用法"><a href="#更多的命令行工具用法" class="headerlink" title="更多的命令行工具用法"></a>更多的命令行工具用法</h4><pre><code>./open-falcon [start|stop|restart|check|monitor|reload] module./open-falcon start agent./open-falcon check        falcon-graph         UP           53007          falcon-hbs         UP           53014        falcon-judge         UP           53020     falcon-transfer         UP           53026       falcon-nodata         UP           53032   falcon-aggregator         UP           53038        falcon-agent         UP           53044      falcon-gateway         UP           53050          falcon-api         UP           53056        falcon-alarm         UP           53063For debugging , You can check $WorkDir/$moduleName/log/logs/xxx.log</code></pre><h2 id="前台安装"><a href="#前台安装" class="headerlink" title="前台安装"></a>前台安装</h2><h3 id="创建工作目录-1"><a href="#创建工作目录-1" class="headerlink" title="创建工作目录"></a>创建工作目录</h3><pre><code>export HOME=/home/workexport WORKSPACE=$HOME/open-falconmkdir -p $WORKSPACEcd $WORKSPACE</code></pre><h3 id="克隆前端组件代码"><a href="#克隆前端组件代码" class="headerlink" title="克隆前端组件代码"></a>克隆前端组件代码</h3><pre><code>cd $WORKSPACEgit clone https://github.com/open-falcon/dashboard.git</code></pre><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><pre><code>yum install -y python-virtualenvyum install -y python-develyum install -y openldap-develyum install -y mysql-develyum groupinstall &quot;Development tools&quot;cd $WORKSPACE/dashboard/virtualenv ./env./env/bin/pip install -r pip_requirements.txt -i https://pypi.douban.com/simple</code></pre><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><pre><code>dashboard的配置文件为： &apos;rrd/config.py&apos;，请根据实际情况修改</code></pre><h3 id="API-ADDR-表示后端api组件的地址"><a href="#API-ADDR-表示后端api组件的地址" class="headerlink" title="API_ADDR 表示后端api组件的地址"></a>API_ADDR 表示后端api组件的地址</h3><pre><code>API_ADDR = &quot;http://127.0.0.1:8080/api/v1&quot; </code></pre><h3 id="根据实际情况，修改PORTALDB-默认用户名为root，默认密码为””"><a href="#根据实际情况，修改PORTALDB-默认用户名为root，默认密码为””" class="headerlink" title="根据实际情况，修改PORTALDB*, 默认用户名为root，默认密码为””"></a>根据实际情况，修改PORTAL<em>DB</em>*, 默认用户名为root，默认密码为””</h3><h3 id="根据实际情况，修改ALARMDB-默认用户名为root，默认密码为””"><a href="#根据实际情况，修改ALARMDB-默认用户名为root，默认密码为””" class="headerlink" title="根据实际情况，修改ALARMDB*, 默认用户名为root，默认密码为””"></a>根据实际情况，修改ALARM<em>DB</em>*, 默认用户名为root，默认密码为””</h3><h3 id="在生产环境启动"><a href="#在生产环境启动" class="headerlink" title="在生产环境启动"></a>在生产环境启动</h3><pre><code>bash control start</code></pre><h3 id="停止dashboard运行"><a href="#停止dashboard运行" class="headerlink" title="停止dashboard运行"></a>停止dashboard运行</h3><pre><code>bash control stop</code></pre><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><pre><code>bash control tail</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;1-跟新yum源&quot;&gt;&lt;a href=&quot;#1-跟新yum源&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="linux" scheme="http://github.lushunde.com/categories/linux/"/>
    
    
      <category term="openfalcon" scheme="http://github.lushunde.com/tags/openfalcon/"/>
    
  </entry>
  
  <entry>
    <title>Quartz使用总结</title>
    <link href="http://github.lushunde.com/2018/04/02/Quartz%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://github.lushunde.com/2018/04/02/Quartz使用总结/</id>
    <published>2018-04-02T15:16:09.000Z</published>
    <updated>2018-04-02T15:39:25.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="废话的前言"><a href="#废话的前言" class="headerlink" title="废话的前言"></a>废话的前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前凭借年轻，凡事都靠脑记。现在工作几年后发现，很多以前看过、用过的东西，再次拿起的时候总觉得记不牢靠。”好记性不如烂笔头”应该是某位上了年纪的大叔的切肤之痛（仅次于上了年纪的难言之瘾）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我觉得这事得怪怪中国的应试教育，中国的考试方式就是要求把脑袋当数据库，以前中学那点知识，确实还能装得下。但现在所需的知识量再一次性装入大脑，就是内存溢出的节奏。另，再相信什么人脑只开发5%的蠢话了（「人脑只用了不到 5%」 的说法是否确有科学依据？）。更可行的方式，应该学学数据库，大脑只记忆知识的索引，而把知识的本身定义在外部的存储中（比如笔记）。基于这个理念，现在准备学着写点总结性的笔记。<br>那为什么不能基于google学习呢？因为google的索引不是你自己，不能精确找到你想要的东西。但它的好处是更海量，能给你原本压根不知道东西。所以，配合使用，疗效更好。</p><h3 id="Quartz可以用来做什么？"><a href="#Quartz可以用来做什么？" class="headerlink" title="Quartz可以用来做什么？"></a>Quartz可以用来做什么？</h3><h4 id="Quartz是一个任务调度框架。比如你遇到这样的问题"><a href="#Quartz是一个任务调度框架。比如你遇到这样的问题" class="headerlink" title="Quartz是一个任务调度框架。比如你遇到这样的问题"></a>Quartz是一个任务调度框架。比如你遇到这样的问题</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    想每月25号，信用卡自动还款<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    想每年4月1日自己给当年暗恋女神发一封匿名贺卡<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    想每隔1小时，备份一下自己的爱情动作片 学习笔记到云盘<br>这些问题总结起来就是：在某一个有规律的时间点干某件事。并且时间的触发的条件可以非常复杂（比如每月最后一个工作日的17:50），复杂到需要一个专门的框架来干这个事。 Quartz就是来干这样的事，你给它一个触发条件的定义，它负责到了时间点，触发相应的Job起来干活。</p><h3 id="一个简单的示例"><a href="#一个简单的示例" class="headerlink" title="一个简单的示例"></a>一个简单的示例</h3><p>这里面的所有例子都是基于Quartz 2.2.1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.DateBuilder.newDate;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.JobBuilder.newJob;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.SimpleScheduleBuilder.simpleSchedule;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.TriggerBuilder.newTrigger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDetail;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Scheduler;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Trigger;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.calendar.AnnualCalendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建scheduler</span></span><br><span class="line">            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义一个Trigger</span></span><br><span class="line">            Trigger trigger = newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>) <span class="comment">//定义name/group</span></span><br><span class="line">                .startNow()<span class="comment">//一旦加入scheduler，立即生效</span></span><br><span class="line">                .withSchedule(simpleSchedule() <span class="comment">//使用SimpleTrigger</span></span><br><span class="line">                    .withIntervalInSeconds(<span class="number">1</span>) <span class="comment">//每隔一秒执行一次</span></span><br><span class="line">                    .repeatForever()) <span class="comment">//一直执行，奔腾到老不停歇</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义一个JobDetail</span></span><br><span class="line">            JobDetail job = newJob(HelloQuartz.class) <span class="comment">//定义Job类为HelloQuartz类，这是真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">"job1"</span>, <span class="string">"group1"</span>) <span class="comment">//定义name/group</span></span><br><span class="line">                .usingJobData(<span class="string">"name"</span>, <span class="string">"quartz"</span>) <span class="comment">//定义属性</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//加入这个调度</span></span><br><span class="line">            scheduler.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动之</span></span><br><span class="line">            scheduler.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//运行一段时间后关闭</span></span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.DisallowConcurrentExecution;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDetail;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloQuartz</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        JobDetail detail = context.getJobDetail();</span><br><span class="line">        String name = detail.getJobDataMap().getString(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"say hello to "</span> + name + <span class="string">" at "</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子很好的覆盖了Quartz最重要的<strong>3个基本要素</strong>：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    Scheduler：调度器。所有的调度都是由它控制。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    Trigger： 定义触发的条件。例子中，它的类型是SimpleTrigger，每隔1秒中执行一次（什么是SimpleTrigger下面会有详述）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    JobDetail &amp; Job： JobDetail 定义的是任务数据，而真正的执行逻辑是在Job中，例子中是HelloQuartz。 为什么设计成JobDetail + Job，不直接使用Job？这是因为任务是有可能并发执行，如果Scheduler直接使用Job，就会存在对同一个Job实例并发访问的问题。而JobDetail &amp; Job 方式，sheduler每次执行，都会根据JobDetail创建一个新的Job实例，这样就可以规避并发访问的问题。</p><h3 id="Quartz-API"><a href="#Quartz-API" class="headerlink" title="Quartz API"></a>Quartz API</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Quartz的API的风格在2.x以后，采用的是DSL风格（通常意味着fluent interface风格），就是示例中newTrigger()那一段东西。它是通过Builder实现的，就是以下几个。（<strong> 下面大部分代码都要引用这些Builder </strong> )</p><p>//job相关的builder<br>import static org.quartz.JobBuilder.*;</p><p>//trigger相关的builder<br>import static org.quartz.TriggerBuilder.<em>;<br>import static org.quartz.SimpleScheduleBuilder.</em>;<br>import static org.quartz.CronScheduleBuilder.<em>;<br>import static org.quartz.DailyTimeIntervalScheduleBuilder.</em>;<br>import static org.quartz.CalendarIntervalScheduleBuilder.*;</p><p>//日期相关的builder<br>import static org.quartz.DateBuilder.*;<br>DSL风格写起来会更加连贯，畅快，而且由于不是使用setter的风格，语义上会更容易理解一些。对比一下：<br>JobDetail jobDetail=new JobDetailImpl(“jobDetail1”,”group1”,HelloQuartz.class);<br>jobDetail.getJobDataMap().put(“name”, “quartz”);</p><p>SimpleTriggerImpl trigger=new SimpleTriggerImpl(“trigger1”,”group1”);<br>trigger.setStartTime(new Date());<br>trigger.setRepeatInterval(1);<br>trigger.setRepeatCount(-1);<br>关于name和group<br>JobDetail和Trigger都有name和group。<br>name是它们在这个sheduler里面的唯一标识。如果我们要更新一个JobDetail定义，只需要设置一个name相同的JobDetail实例即可。<br>group是一个组织单元，sheduler会提供一些对整组操作的API，比如 scheduler.resumeJobs()。<br>Trigger<br>在开始详解每一种Trigger之前，需要先了解一下Trigger的一些共性。<br>StartTime &amp; EndTime<br>startTime和endTime指定的Trigger会被触发的时间区间。在这个区间之外，Trigger是不会被触发的。<br><strong>所有Trigger都会包含这两个属性</strong><br>优先级（Priority）<br>当scheduler比较繁忙的时候，可能在同一个时刻，有多个Trigger被触发了，但资源不足（比如线程池不足）。那么这个时候比剪刀石头布更好的方式，就是设置优先级。优先级高的先执行。<br>需要注意的是，优先级只有在同一时刻执行的Trigger之间才会起作用，如果一个Trigger是9:00，另一个Trigger是9:30。那么无论后一个优先级多高，前一个都是先执行。<br>优先级的值默认是5，当为负数时使用默认值。最大值似乎没有指定，但建议遵循Java的标准，使用1-10，不然鬼才知道看到【优先级为10】是时，上头还有没有更大的值。<br>Misfire(错失触发）策略<br>类似的Scheduler资源不足的时候，或者机器崩溃重启等，有可能某一些Trigger在应该触发的时间点没有被触发，也就是Miss Fire了。这个时候Trigger需要一个策略来处理这种情况。每种Trigger可选的策略各不相同。<br>这里有两个点需要重点注意：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    MisFire的触发是有一个阀值，这个阀值是配置在JobStore的。比RAMJobStore是org.quartz.jobStore.misfireThreshold。只有超过这个阀值，才会算MisFire。小于这个阀值，Quartz是会全部重新触发。<br>所有MisFire的策略实际上都是解答两个问题：</p><ol><li>已经MisFire的任务还要重新触发吗？</li><li>如果发生MisFire，要调整现有的调度时间吗？<br>比如SimpleTrigger的MisFire策略有：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY<br>这个不是忽略已经错失的触发的意思，而是说忽略MisFire策略。它会在资源合适的时候，重新触发所有的MisFire任务，并且不会影响现有的调度时间。<br>比如，SimpleTrigger每15秒执行一次，而中间有5分钟时间它都MisFire了，一共错失了20个，5分钟后，假设资源充足了，并且任务允许并发，它会被一次性触发。<br>这个属性是所有Trigger都适用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    MISFIRE_INSTRUCTION_FIRE_NOW<br>忽略已经MisFire的任务，并且立即执行调度。这通常只适用于只执行一次的任务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT<br>将startTime设置当前时间，立即重新调度任务，包括的MisFire的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT<br>类似MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT，区别在于会忽略已经MisFire的任务<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT<br>在下一次调度时间点，重新开始调度任务，包括的MisFire的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT<br>类似于MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT，区别在于会忽略已经MisFire的任务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    MISFIRE_INSTRUCTION_SMART_POLICY<br>所有的Trigger的MisFire默认值都是这个，大致意思是“把处理逻辑交给聪明的Quartz去决定”。基本策略是，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    如果是只执行一次的调度，使用MISFIRE_INSTRUCTION_FIRE_NOW<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    如果是无限次的调度(repeatCount是无限的)，使用MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•    否则，使用MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT<br>MisFire的东西挺繁杂的，可以参考这篇<h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3>这里的Calendar不是jdk的java.util.Calendar，不是为了计算日期的。它的作用是在于补充Trigger的时间。可以排除或加入某一些特定的时间点。<br>以”每月25日零点自动还卡债“为例，我们想排除掉每年的2月25号零点这个时间点（因为有2.14，所以2月一定会破产）。这个时间，就可以用Calendar来实现。<br>例子：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AnnualCalendar cal = <span class="keyword">new</span> AnnualCalendar(); <span class="comment">//定义一个每年执行Calendar，精度为天，即不能定义到2.25号下午2:00</span></span><br><span class="line">java.util.Calendar excludeDay = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">excludeDay.setTime(newDate().inMonthOnDay(<span class="number">2</span>, <span class="number">25</span>).build());</span><br><span class="line">cal.setDayExcluded(excludeDay, <span class="keyword">true</span>);  <span class="comment">//设置排除2.25这个日期</span></span><br><span class="line">scheduler.addCalendar(<span class="string">"FebCal"</span>, cal, <span class="keyword">false</span>, <span class="keyword">false</span>); <span class="comment">//scheduler加入这个Calendar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Trigger</span></span><br><span class="line">Trigger trigger = newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>) </span><br><span class="line">    .startNow()<span class="comment">//一旦加入scheduler，立即生效</span></span><br><span class="line">    .modifiedByCalendar(<span class="string">"FebCal"</span>) <span class="comment">//使用Calendar !!</span></span><br><span class="line">    .withSchedule(simpleSchedule()</span><br><span class="line">        .withIntervalInSeconds(<span class="number">1</span>) </span><br><span class="line">        .repeatForever()) </span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></li></ol><p>Quartz体贴地为我们提供以下几种Calendar，注意，所有的Calendar既可以是排除，也可以是包含，取决于：<br>•    HolidayCalendar。指定特定的日期，比如20140613。精度到天。<br>•    DailyCalendar。指定每天的时间段（rangeStartingTime, rangeEndingTime)，格式是HH:MM[:SS[:mmm]]。也就是最大精度可以到毫秒。<br>•    WeeklyCalendar。指定每星期的星期几，可选值比如为java.util.Calendar.SUNDAY。精度是天。<br>•    MonthlyCalendar。指定每月的几号。可选值为1-31。精度是天<br>•    AnnualCalendar。 指定每年的哪一天。使用方式如上例。精度是天。<br>•    CronCalendar。指定Cron表达式。精度取决于Cron表达式，也就是最大精度可以到秒。<br><strong>Trigger实现类</strong><br>Quartz有以下几种Trigger实现:<br>SimpleTrigger<br>指定从某一个时间开始，以一定的时间间隔（单位是毫秒）执行的任务。<br>它适合的任务类似于：9:00 开始，每隔1小时，执行一次。<br>它的属性有：<br>•    repeatInterval 重复间隔<br>•    repeatCount 重复次数。实际执行次数是 repeatCount+1。因为在startTime的时候一定会执行一次。<strong> 下面有关repeatCount 属性的都是同理。　</strong><br>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">simpleSchedule()</span><br><span class="line">        .withIntervalInHours(<span class="number">1</span>) <span class="comment">//每小时执行一次</span></span><br><span class="line">        .repeatForever() <span class="comment">//次数不限</span></span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">simpleSchedule()</span><br><span class="line">    .withIntervalInMinutes(<span class="number">1</span>) <span class="comment">//每分钟执行一次</span></span><br><span class="line">    .withRepeatCount(<span class="number">10</span>) <span class="comment">//次数为10次</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></p><p>CalendarIntervalTrigger<br>类似于SimpleTrigger，指定从某一个时间开始，以一定的时间间隔执行的任务。 但是不同的是SimpleTrigger指定的时间间隔为毫秒，没办法指定每隔一个月执行一次（每月的时间间隔不是固定值），而CalendarIntervalTrigger支持的间隔单位有秒，分钟，小时，天，月，年，星期。<br>相较于SimpleTrigger有两个优势：1、更方便，比如每隔1小时执行，你不用自己去计算1小时等于多少毫秒。 2、支持不是固定长度的间隔，比如间隔为月和年。但劣势是精度只能到秒。<br>它适合的任务类似于：9:00 开始执行，并且以后每周 9:00 执行一次<br>它的属性有:<br>•    interval 执行间隔<br>•    intervalUnit 执行间隔的单位（秒，分钟，小时，天，月，年，星期）<br>例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">calendarIntervalSchedule()</span><br><span class="line">    .withIntervalInDays(<span class="number">1</span>) <span class="comment">//每天执行一次</span></span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">calendarIntervalSchedule()</span><br><span class="line">    .withIntervalInWeeks(<span class="number">1</span>) <span class="comment">//每周执行一次</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></p><p>DailyTimeIntervalTrigger<br>指定每天的某个时间段内，以一定的时间间隔执行任务。并且它可以支持指定星期。<br>它适合的任务类似于：指定每天9:00 至 18:00 ，每隔70秒执行一次，并且只要周一至周五执行。<br>它的属性有:<br>•    startTimeOfDay 每天开始时间<br>•    endTimeOfDay 每天结束时间<br>•    daysOfWeek 需要执行的星期<br>•    interval 执行间隔<br>•    intervalUnit 执行间隔的单位（秒，分钟，小时，天，月，年，星期）<br>•    repeatCount 重复次数<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dailyTimeIntervalSchedule()</span><br><span class="line">    .startingDailyAt(TimeOfDay.hourAndMinuteOfDay(9, 0)) //第天9：00开始</span><br><span class="line">    .endingDailyAt(TimeOfDay.hourAndMinuteOfDay(16, 0)) //16：00 结束 </span><br><span class="line">    .onDaysOfTheWeek(MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY) //周一至周五执行</span><br><span class="line">    .withIntervalInHours(1) //每间隔1小时执行一次</span><br><span class="line">    .withRepeatCount(100) //最多重复100次（实际执行100+1次）</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">dailyTimeIntervalSchedule()</span><br><span class="line">    .startingDailyAt(TimeOfDay.hourAndMinuteOfDay(9, 0)) //第天9：00开始</span><br><span class="line">    .endingDailyAfterCount(10) //每天执行10次，这个方法实际上根据 startTimeOfDay+interval*count 算出 endTimeOfDay</span><br><span class="line">    .onDaysOfTheWeek(MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY) //周一至周五执行</span><br><span class="line">    .withIntervalInHours(1) //每间隔1小时执行一次</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></p><h3 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="CronTrigger"></a>CronTrigger</h3><p>适合于更复杂的任务，它支持类型于Linux Cron的语法（并且更强大）。基本上它覆盖了以上三个Trigger的绝大部分能力（但不是全部）—— 当然，也更难理解。<br>它适合的任务类似于：每天0:00,9:00,18:00各执行一次。<br>它的属性只有:<br>•    Cron表达式。但这个表示式本身就够复杂了。下面会有说明。<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cronSchedule(&quot;0 0/2 8-17 * * ?&quot;) // 每天8:00-17:00，每隔2分钟执行一次</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">cronSchedule(&quot;0 30 9 ? * MON&quot;) // 每周一，9:30执行一次</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">weeklyOnDayAndHourAndMinute(MONDAY,9, 30) //等同于 0 30 9 ? * MON </span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></p><p>Cron表达式<br>位置|时间域|允许值|特殊值<br>—-|—|—|—<br>1|    秒|    0-59|    , - <em> /<br>2|    分钟|    0-59|    , - </em> /<br>3|    小时|    0-23|    , - <em> /<br>4|    日期|    1-31|    , - </em> ? / L W C<br>5|    月份|    1-12|    , - <em> /<br>6|    星期|    1-7    |, - </em> ? / L C #<br>7|    年份（可选）|    1-31|    , - <em> /<br>星号()：可用在所有字段中，表示对应时间域的每一个时刻，例如， 在分钟字段时，表示“每分钟”；<br>问号（?）：该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于点位符；<br>减号(-)：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12；<br>逗号(,)：表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；<br>斜杠(/)：x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用</em>/y，它等同于0/y；<br>L：该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。L在日期字段中，表示这个月份的最后一天，如一月的31号，非闰年二月的28号；如果L用在星期中，则表示星期六，等同于7。但是，如果L出现在星期字段里，而且在前面有一个数值X，则表示“这个月的最后X天”，例如，6L表示该月的最后星期五；<br>W：该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号是星期二，那结果就是15号星期二。但必须注意关联的匹配日期不能够跨月，如你指定1W，如果1号是星期六，结果匹配的是3号星期一，而非上个月最后的那天。W字符串只能指定单一日期，而不能指定日期范围；<br>LW组合：在日期字段可以组合使用LW，它的意思是当月的最后一个工作日；<br>井号(#)：该字符只能在星期字段中使用，表示当月某个工作日。如6#3表示当月的第三个星期五(6表示星期五，#3表示当前的第三个)，而4#5表示当月的第五个星期三，假设当月没有第五个星期三，忽略不触发；<br>C：该字符只在日期和星期字段中使用，代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。<br>Cron表达式对特殊字符的大小写不敏感，对代表星期的缩写英文大小写也不敏感。<br>一些例子：<br>表示式|    说明<br>—|—<br>0 0 12 <em> </em> ?|    每天12点运行<br>0 15 10 ? <em> </em>|    每天10:15运行<br>0 15 10 <em> </em> ?|    每天10:15运行<br>0 15 10 <em> </em> ? <em>|    每天10:15运行<br>0 15 10 </em> <em> ? 2008|    在2008年的每天10：15运行<br>0 </em> 14 <em> </em> ?|    每天14点到15点之间每分钟运行一次，开始于14:00，结束于14:59。<br>0 0/5 14 <em> </em> ?|    每天14点到15点每5分钟运行一次，开始于14:00，结束于14:55。<br>0 0/5 14,18 <em> </em> ?|    每天14点到15点每5分钟运行一次，此外每天18点到19点每5钟也运行一次。<br>0 0-5 14 <em> </em> ?|    每天14:00点到14:05，每分钟运行一次。<br>0 10,44 14 ? 3 WED|    3月每周三的14:10分到14:44，每分钟运行一次。<br>0 15 10 ? <em> MON-FRI|    每周一，二，三，四，五的10:15分运行。<br>0 15 10 15 </em> ?|    每月15日10:15分运行。<br>0 15 10 L <em> ?|    每月最后一天10:15分运行。<br>0 15 10 ? </em> 6L|    每月最后一个星期五10:15分运行。<br>0 15 10 ? <em> 6L 2007-2009|    在2007,2008,2009年每个月的最后一个星期五的10:15分运行。<br>0 15 10 ? </em> 6#3|    每月第三个星期五的10:15分运行。</p><h3 id="JobDetail-amp-Job"><a href="#JobDetail-amp-Job" class="headerlink" title="JobDetail &amp; Job"></a><strong>JobDetail &amp; Job</strong></h3><p>JobDetail是任务的定义，而Job是任务的执行逻辑。在JobDetail里会引用一个Job Class定义。一个最简单的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class JobTest &#123;</span><br><span class="line">    public static void main(String[] args) throws SchedulerException, IOException &#123;</span><br><span class="line">           JobDetail job=newJob()</span><br><span class="line">               .ofType(DoNothingJob.class) //引用Job Class</span><br><span class="line">               .withIdentity(&quot;job1&quot;, &quot;group1&quot;) //设置name/group</span><br><span class="line">               .withDescription(&quot;this is a test job&quot;) //设置描述</span><br><span class="line">               .usingJobData(&quot;age&quot;, 18) //加入属性到ageJobDataMap</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">           job.getJobDataMap().put(&quot;name&quot;, &quot;quertz&quot;); //加入属性name到JobDataMap</span><br><span class="line"></span><br><span class="line">           //定义一个每秒执行一次的SimpleTrigger</span><br><span class="line">           Trigger trigger=newTrigger()</span><br><span class="line">                   .startNow()</span><br><span class="line">                   .withIdentity(&quot;trigger1&quot;)</span><br><span class="line">                   .withSchedule(simpleSchedule()</span><br><span class="line">                       .withIntervalInSeconds(1)</span><br><span class="line">                       .repeatForever())</span><br><span class="line">                   .build();</span><br><span class="line"></span><br><span class="line">           Scheduler sche=StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">           sche.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line">           sche.start();</span><br><span class="line"></span><br><span class="line">           System.in.read();</span><br><span class="line"></span><br><span class="line">           sche.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class DoNothingJob implements Job &#123;</span><br><span class="line">    public void execute(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class="line">        System.out.println(&quot;do nothing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上例我们可以看出，要定义一个任务，需要干几件事：</p><ol><li>创建一个org.quartz.Job的实现类，并实现实现自己的业务逻辑。比如上面的DoNothingJob。</li><li>定义一个JobDetail，引用这个实现类</li><li>加入scheduleJob<br>Quartz调度一次任务，会干如下的事：</li><li>JobClass jobClass=JobDetail.getJobClass()</li><li>Job jobInstance=jobClass.newInstance()。所以Job实现类，必须有一个public的无参构建方法。</li><li>jobInstance.execute(JobExecutionContext context)。JobExecutionContext是Job运行的上下文，可以获得Trigger、Scheduler、JobDetail的信息。<br>也就是说，每次调度都会创建一个新的Job实例，这样的好处是有些任务并发执行的时候，不存在对临界资源的访问问题——当然，如果需要共享JobDataMap的时候，还是存在临界资源的并发访问的问题。<br>JobDataMap<br>Job都次都是newInstance的实例，那我怎么传值给它？ 比如我现在有两个发送邮件的任务，一个是发给”liLei”,一个发给”hanmeimei”,不能说我要写两个Job实现类LiLeiSendEmailJob和HanMeiMeiSendEmailJob。实现的办法是通过JobDataMap。<br>每一个JobDetail都会有一个JobDataMap。JobDataMap本质就是一个Map的扩展类，只是提供了一些更便捷的方法，比如getString()之类的。<br>我们可以在定义JobDetail，加入属性值，方式有二：<br>newJob().usingJobData(“age”, 18) //加入属性到ageJobDataMap<br>or<br>job.getJobDataMap().put(“name”, “quertz”); //加入属性name到JobDataMap<br>然后在Job中可以获取这个JobDataMap的值，方式同样有二：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class HelloQuartz implements Job &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public void execute(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class="line">        JobDetail detail = context.getJobDetail();</span><br><span class="line">        JobDataMap map = detail.getJobDataMap(); //方法一：获得JobDataMap</span><br><span class="line">        System.out.println(&quot;say hello to &quot; + name + &quot;[&quot; + map.getInt(&quot;age&quot;) + &quot;]&quot; + &quot; at &quot;</span><br><span class="line">                           + new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //方法二：属性的setter方法，会将JobDataMap的属性自动注入</span><br><span class="line">    public void setName(String name) &#123; </span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>对于同一个JobDetail实例，执行的多个Job实例，是共享同样的JobDataMap，也就是说，如果你在任务里修改了里面的值，会对其他Job实例（并发的或者后续的）造成影响。<br>除了JobDetail，Trigger同样有一个JobDataMap，共享范围是所有使用这个Trigger的Job实例。</p><h3 id="Job并发"><a href="#Job并发" class="headerlink" title="Job并发"></a><strong>Job并发</strong></h3><p>Job是有可能并发执行的，比如一个任务要执行10秒中，而调度算法是每秒中触发1次，那么就有可能多个任务被并发执行。<br>有时候我们并不想任务并发执行，比如这个任务要去”获得数据库中所有未发送邮件的名单“，如果是并发执行，就需要一个数据库锁去避免一个数据被多次处理。这个时候一个@DisallowConcurrentExecution解决这个问题。<br>就是这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class DoNothingJob implements Job &#123;</span><br><span class="line">    @DisallowConcurrentExecution</span><br><span class="line">    public void execute(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class="line">        System.out.println(&quot;do nothing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，@DisallowConcurrentExecution是对JobDetail实例生效，也就是如果你定义两个JobDetail，引用同一个Job类，是可以并发执行的。<br>JobExecutionException<br>Job.execute()方法是不允许抛出除JobExecutionException之外的所有异常的（包括RuntimeException)，所以编码的时候，最好是try-catch住所有的Throwable，小心处理。<br>其他属性<br>•    Durability(耐久性？)<br>如果一个任务不是durable，那么当没有Trigger关联它的时候，它就会被自动删除。<br>•    RequestsRecovery<br>如果一个任务是”requests recovery”，那么当任务运行过程非正常退出时（比如进程崩溃，机器断电，但不包括抛出异常这种情况），Quartz再次启动时，会重新运行一次这个任务实例。<br>可以通过JobExecutionContext.isRecovering()查询任务是否是被恢复的。</p><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a><strong>Scheduler</strong></h3><p>Scheduler就是Quartz的大脑，所有任务都是由它来设施。<br>Schduelr包含一个两个重要组件: JobStore和ThreadPool。<br>JobStore是会来存储运行时信息的，包括Trigger,Schduler,JobDetail，业务锁等。它有多种实现RAMJob(内存实现)，JobStoreTX(JDBC，事务由Quartz管理），JobStoreCMT(JDBC，使用容器事务)，ClusteredJobStore(集群实现)、TerracottaJobStore(什么是Terractta)。<br>ThreadPool就是线程池，Quartz有自己的线程池实现。所有任务的都会由线程池执行。</p><h3 id="SchedulerFactory"><a href="#SchedulerFactory" class="headerlink" title="SchedulerFactory"></a>SchedulerFactory</h3><p>SchdulerFactory，顾名思义就是来用创建Schduler了，有两个实现：DirectSchedulerFactory和 StdSchdulerFactory。前者可以用来在代码里定制你自己的Schduler参数。后者是直接读取classpath下的quartz.properties（不存在就都使用默认值）配置来实例化Schduler。通常来讲，我们使用StdSchdulerFactory也就足够了。<br>SchdulerFactory本身是支持创建RMI stub的，可以用来管理远程的Scheduler，功能与本地一样，可以远程提交个Job什么的。<br>DirectSchedulerFactory的创建接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    /**</span><br><span class="line">     * Same as</span><br><span class="line">     * &#123;@link DirectSchedulerFactory#createScheduler(ThreadPool threadPool, JobStore jobStore)&#125;,</span><br><span class="line">     * with the addition of specifying the scheduler name and instance ID. This</span><br><span class="line">     * scheduler can only be retrieved via</span><br><span class="line">     * &#123;@link DirectSchedulerFactory#getScheduler(String)&#125;</span><br><span class="line">     *</span><br><span class="line">     * @param schedulerName</span><br><span class="line">     *          The name for the scheduler.</span><br><span class="line">     * @param schedulerInstanceId</span><br><span class="line">     *          The instance ID for the scheduler.</span><br><span class="line">     * @param threadPool</span><br><span class="line">     *          The thread pool for executing jobs</span><br><span class="line">     * @param jobStore</span><br><span class="line">     *          The type of job store</span><br><span class="line">     * @throws SchedulerException</span><br><span class="line">     *           if initialization failed</span><br><span class="line">     */</span><br><span class="line">    public void createScheduler(String schedulerName,</span><br><span class="line">            String schedulerInstanceId, ThreadPool threadPool, JobStore jobStore)</span><br><span class="line">        throws SchedulerException;</span><br><span class="line">StdSchdulerFactory的配置例子， 更多配置，参考Quartz配置指南：</span><br><span class="line">org.quartz.scheduler.instanceName = DefaultQuartzScheduler</span><br><span class="line">org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool</span><br><span class="line">org.quartz.threadPool.threadCount = 10 </span><br><span class="line">org.quartz.threadPool.threadPriority = 5</span><br><span class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true</span><br><span class="line">org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</span><br></pre></td></tr></table></figure></p><p>这里未讲的稍微高级的主题<br>•    JobStore 介绍、配置<br>•    集群: 介绍、配置<br>•    RMI<br>•    监听器 TriggerListeners and JobListeners、SchedulerListeners<br>•    插件<br>参考<br>•    <a href="http://www.cnblogs.com/drift-ice/p/3817269.html" target="_blank" rel="noopener">http://www.cnblogs.com/drift-ice/p/3817269.html</a><br>•    主要的资料来自官方文档，这里有教程，例子，配置等，非常详细<br>•    Cron表达式的说明，大段引用自这里<br>•    中文文档，虽然版本比较旧，但是很多东西还是没过时的，比如插件、RMI，Quartz_Job_Scheduling_Framework_CN_V1.0.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;废话的前言&quot;&gt;&lt;a href=&quot;#废话的前言&quot; class=&quot;headerlink&quot; title=&quot;废话的前言&quot;&gt;&lt;/a&gt;废话的前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;以前凭借年轻，凡事都靠脑记。现在工作几年后发
      
    
    </summary>
    
      <category term="JAVA" scheme="http://github.lushunde.com/categories/JAVA/"/>
    
    
      <category term="quartz" scheme="http://github.lushunde.com/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Ajax跨域完全讲解</title>
    <link href="http://github.lushunde.com/2018/04/02/ajax%E8%B7%A8%E5%9F%9F%E5%AE%8C%E5%85%A8%E8%AE%B2%E8%A7%A3/"/>
    <id>http://github.lushunde.com/2018/04/02/ajax跨域完全讲解/</id>
    <published>2018-04-02T14:41:13.000Z</published>
    <updated>2018-04-02T14:52:42.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是跨域？为什么会发生跨域？"><a href="#什么是跨域？为什么会发生跨域？" class="headerlink" title="什么是跨域？为什么会发生跨域？"></a>什么是跨域？为什么会发生跨域？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当请求的地址与来源地址的协议\域名\端口中的任一值不相同时, 均视为是一个跨域的请求，如果<strong>请求的TYPE 是XMLHttpRequest（xhr）</strong> 则根据<strong>浏览器的同源策略</strong>，浏览器请求发送出去会收到正常返回结果，但是浏览器不会解析，因为浏览器禁止了跨域请求解析。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时w3c 为浏览器制定了可以跨域通信规范Cross-Origin Resource Sharing(CORS)通过使用 XMLHttpRequest 对象, CORS可以让开发者方便的进行跨域通信,通过添加一些特殊的请求\响应头， 就像在使用同域通信一样. </p><p><img src="http://githubimg.lushunde.com/2018-03-20_201527.jpg" alt=""></p><h2 id="解决跨域的方法"><a href="#解决跨域的方法" class="headerlink" title="解决跨域的方法"></a>解决跨域的方法</h2><h3 id="1-浏览器中关闭跨域检查，就可以解析跨域问题。-放弃"><a href="#1-浏览器中关闭跨域检查，就可以解析跨域问题。-放弃" class="headerlink" title="1.浏览器中关闭跨域检查，就可以解析跨域问题。(放弃)"></a>1.浏览器中关闭跨域检查，就可以解析跨域问题。(放弃)</h3><p>缺点：</p><ul><li>需要每个客户端都关闭跨域，不现实</li><li>浏览器默认启用，足以说明安全性，启用会导致一些安全性问题。</li></ul><p><strong>缺点很明显，所以就不做过多分析，没人用这种方法</strong> </p><h4 id="展示："><a href="#展示：" class="headerlink" title="展示："></a>展示：</h4><h5 id="cmd进入chrome-exe的目录键入以下命令"><a href="#cmd进入chrome-exe的目录键入以下命令" class="headerlink" title="cmd进入chrome.exe的目录键入以下命令"></a>cmd进入chrome.exe的目录键入以下命令</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Lu</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Google</span>\<span class="title">Chrome</span>&gt;<span class="title">chrome</span> --<span class="title">disable</span>-<span class="title">web</span>-<span class="title">security</span>  --<span class="title">user</span>-<span class="title">data</span>-<span class="title">dir</span></span></span><br></pre></td></tr></table></figure><p><img src="http://githubimg.lushunde.com/2018-03-20_210822.jpg" alt=""></p><h3 id="2-通过JSONP实现跨域请求"><a href="#2-通过JSONP实现跨域请求" class="headerlink" title="2.通过JSONP实现跨域请求"></a>2.通过JSONP实现跨域请求</h3><h4 id="如何解决跨域？"><a href="#如何解决跨域？" class="headerlink" title="如何解决跨域？"></a>如何解决跨域？</h4><p>&nbsp;&nbsp;1.JSONP是什么？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTML 的&lt;script&gt; 元素是一个例外（支持跨域）。利用 &lt;script&gt; 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。<br>&nbsp;&nbsp;2.JSONP的原理？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送一个jsonp的请求，实际是发送一个请求，并且添加一个collback的参数方法给后台，后台将数据作为 对象内容，将jsonp传过来的collback值作为方法名称返回前段为一个 script 方法，方法名就是collback的值，方法体就是我们请求返回的内容，因为script 没有跨域问题，这里就是script的解析了，解析出我们的数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单说：前段发送地址和script方法名-&gt;后台获取方法名，查询数据 包装为script function返回给前短,动态插入使用后删除，浏览器script支持跨域方法调用。<br>&nbsp;&nbsp;3.JSONP修改方式？ <strong>需要修改后端代码</strong></p><ul><li>前段请求发送agax请求  添加 dataType: “jsonp”  //默认请求自动添加callback参数</li><li>后台添加jsonp支持     添加 JsonpAdvice extends AbstractJsonpResponseBodyAdvice</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonpAdvice</span> <span class="keyword">extends</span> <span class="title">AbstractJsonpResponseBodyAdvice</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonAdvice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"callback"</span>);      <span class="comment">//添加前段传来的callback【名字可变，前后保持一致即可】</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>发送的请求 TYPE 是 script 格式,context-type 是 application/javascript</p><p> <img src="http://githubimg.lushunde.com/2018-03-20_214240.jpg" alt=""></p></li></ul><p>&nbsp;&nbsp;4.弊端</p><ul><li>jsonp 需要改动服务端，当我们是调用方，改不了 被调用方的服务端。</li><li>jsonp只支持GET请求，不能满足日常开发 </li><li>发送的不是XHR请求，不能使用XHR的新特性，不方便</li></ul><h2 id="解决XHR的跨域请求（推荐使用）"><a href="#解决XHR的跨域请求（推荐使用）" class="headerlink" title="解决XHR的跨域请求（推荐使用）"></a>解决XHR的跨域请求（推荐使用）</h2><h3 id="解决XHR的跨域-的原理？"><a href="#解决XHR的跨域-的原理？" class="headerlink" title="解决XHR的跨域 的原理？"></a>解决XHR的跨域 的原理？</h3><p>&nbsp;<img src="http://githubimg.lushunde.com/2018-03-20_221007.jpg" alt=""></p><h3 id="浏览器对XHR跨域拦截是先请求还是先判断？"><a href="#浏览器对XHR跨域拦截是先请求还是先判断？" class="headerlink" title="浏览器对XHR跨域拦截是先请求还是先判断？"></a>浏览器对XHR跨域拦截是先请求还是先判断？</h3><h4 id="简单请求-【先请求，后判断】"><a href="#简单请求-【先请求，后判断】" class="headerlink" title="简单请求 【先请求，后判断】"></a>简单请求 【先请求，后判断】</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方法为：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  GET<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  HEAD<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  POST<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  请求header里面<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  无自定义头<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Content-Type为以下几种：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  text/plain<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  multipart/form-data<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  application/x-www-form-urlencoded</p><h4 id="非简单请求-【先判断后请求】"><a href="#非简单请求-【先判断后请求】" class="headerlink" title="非简单请求 【先判断后请求】"></a>非简单请求 【先判断后请求】</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  工作中常见的有：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    put、delete 方法的ajax请求<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    发送json格式的ajax请求<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   带自定义头的ajax请求</p><p>非简单请求 会现发送一个  options 的请求，主要是确定服务端是否支持跨域，如果支持，则发送真正请求，如果不支持，将不会发送真正请求。</p><h3 id="如何判断？"><a href="#如何判断？" class="headerlink" title="如何判断？"></a>如何判断？</h3><p>浏览器查看返回的response中是否有 Origin 标示，如果没有则表示不支持跨域，有则是 W3C 的CORS规范实现跨域。</p><p><img src="http://githubimg.lushunde.com/2018-03-20_230908.jpg" alt=""></p><h3 id="被调用方解决跨域"><a href="#被调用方解决跨域" class="headerlink" title="被调用方解决跨域"></a>被调用方解决跨域</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务端解决 Filter设置 origin参数<br>    编写filter添加两个参数，代码如下：(不满足带coocik的请求)</p><pre><code>![](http://githubimg.lushunde.com/2018-03-20_231854.jpg)查看请求返回response header![](http://githubimg.lushunde.com/2018-03-20_231825.jpg)</code></pre><h4 id="nginx-解决"><a href="#nginx-解决" class="headerlink" title="nginx 解决"></a>nginx 解决</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> b.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080/;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Methods *;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Max-Age <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="variable">$http_origin</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="variable">$http_access_control_request_headers</span>;</span><br><span class="line">        </span><br><span class="line">        if($request_method = OPTIONS)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">200</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h4><p>@CrossOrigin 注解可以直接 解决 跨域</p><ul><li>可以加在在方法上</li><li>也可以加在类上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用方解决"><a href="#调用方解决" class="headerlink" title="调用方解决"></a>调用方解决</h3><h4 id="nginx-解决-1"><a href="#nginx-解决-1" class="headerlink" title="nginx 解决"></a>nginx 解决</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> a.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8081/;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> /ajaxserver&#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080/test/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关视频：慕课网 <a href="http://www.imooc.com/learn/947" target="_blank" rel="noopener">http://www.imooc.com/learn/947</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是跨域？为什么会发生跨域？&quot;&gt;&lt;a href=&quot;#什么是跨域？为什么会发生跨域？&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域？为什么会发生跨域？&quot;&gt;&lt;/a&gt;什么是跨域？为什么会发生跨域？&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      
    
    </summary>
    
      <category term="前段" scheme="http://github.lushunde.com/categories/%E5%89%8D%E6%AE%B5/"/>
    
    
      <category term="跨域，agax" scheme="http://github.lushunde.com/tags/%E8%B7%A8%E5%9F%9F%EF%BC%8Cagax/"/>
    
  </entry>
  
  <entry>
    <title>logback的使用和logback.xml详解</title>
    <link href="http://github.lushunde.com/2018/04/02/logback%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8Clogback-xml%E8%AF%A6%E8%A7%A3/"/>
    <id>http://github.lushunde.com/2018/04/02/logback的使用和logback-xml详解/</id>
    <published>2018-04-02T12:52:46.000Z</published>
    <updated>2018-04-02T13:02:52.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、logback的介绍"><a href="#一、logback的介绍" class="headerlink" title="一、logback的介绍"></a>一、logback的介绍</h3><p>　　Logback是由log4j创始人设计的另一个开源日志组件,官方网站： <a href="http://logback.qos.ch。它当前分为下面下个**模块**：" target="_blank" rel="noopener">http://logback.qos.ch。它当前分为下面下个**模块**：</a><br>　　<strong>logback-core</strong>：其它两个模块的基础模块<br>　　<strong>logback-classic</strong>：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging<br>　　<strong>logback-access</strong>：访问模块与Servlet容器集成提供通过Http来访问日志的功能</p><h3 id="二、logback取代log4j的理由："><a href="#二、logback取代log4j的理由：" class="headerlink" title="二、logback取代log4j的理由："></a>二、logback取代log4j的理由：</h3><ol><li>更快的实现：Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了。</li><li>非常充分的测试：Logback经过了几年，数不清小时的测试。Logback的测试完全不同级别的。</li><li>Logback-classic非常自然实现了SLF4j：Logback-classic实现了SLF4j。在使用SLF4j中，你都感觉不到logback-classic。而且因为logback-classic非常自然地实现了slf4j ， 所 以切换到log4j或者其他，非常容易，只需要提供成另一个jar包就OK，根本不需要去动那些通过SLF4JAPI实现的代码。</li><li>非常充分的文档 官方网站有两百多页的文档。</li><li>自动重新加载配置文件，当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程。这个技术充分保证了应用程序能跑得很欢在JEE环境里面。</li><li>Lilith是log事件的观察者，和log4j的chainsaw类似。而lilith还能处理大数量的log数据 。</li><li>谨慎的模式和非常友好的恢复，在谨慎模式下，多个FileAppender实例跑在多个JVM下，能 够安全地写道同一个日志文件。RollingFileAppender会有些限制。Logback的FileAppender和它的子类包括 RollingFileAppender能够非常友好地从I/O异常中恢复。</li><li>配置文件可以处理不同的情况，开发人员经常需要判断不同的Logback配置文件在不同的环境下（开发，测试，生产）。而这些配置文件仅仅只有一些很小的不同，可以通过,和来实现，这样一个配置文件就可以适应多个环境。</li><li>Filters（过滤器）有些时候，需要诊断一个问题，需要打出日志。在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续 保持那个日志级别而除掉某种特殊情况，如alice这个用户登录，她的日志将打在DEBUG级别而其他用户可以继续打在WARN级别。要实现这个功能只需加4行XML配置。可以参考MDCFIlter 。</li><li>SiftingAppender（一个非常多功能的Appender）：它可以用来分割日志文件根据任何一个给定的运行参数。如，SiftingAppender能够区别日志事件跟进用户的Session，然后每个用户会有一个日志文件。</li><li>自动压缩已经打出来的log：RollingFileAppender在产生新文件的时候，会自动压缩已经打出来的日志文件。压缩是个异步过程，所以甚至对于大的日志文件，在压缩过程中应用不会受任何影响。</li><li>堆栈树带有包版本：Logback在打出堆栈树日志时，会带上包的数据。</li><li>自动去除旧的日志文件：通过设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量。如果设置maxHistory 12，那那些log文件超过12个月的都会被自动移除。<h3 id="三、logback的配置介绍"><a href="#三、logback的配置介绍" class="headerlink" title="三、logback的配置介绍"></a>三、logback的配置介绍</h3>　　<h4 id="Logger、appender及layout"><a href="#Logger、appender及layout" class="headerlink" title="Logger、appender及layout"></a>Logger、appender及layout</h4><strong>Logger</strong>作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。<br><strong>Appender</strong>主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。<br><strong>Layout</strong> 负责把事件转换成字符串，格式化的日志信息的输出。<h4 id="logger-context"><a href="#logger-context" class="headerlink" title="logger context"></a>logger context</h4>各个logger 都被关联到一个 LoggerContext，LoggerContext负责制造logger，也负责以树结构排列各logger。其他所有logger也通过org.slf4j.LoggerFactory 类的静态方法getLogger取得。 getLogger方法以 logger名称为参数。用同一名字调用LoggerFactory.getLogger 方法所得到的永远都是同一个logger对象的引用。<h4 id="有效级别及级别的继承"><a href="#有效级别及级别的继承" class="headerlink" title="有效级别及级别的继承"></a>有效级别及级别的继承</h4><strong>Logger</strong> 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR，定义于ch.qos.logback.classic.Level类。如果 logger没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger 默认级别是 DEBUG。<h4 id="打印方法与基本的选择规则"><a href="#打印方法与基本的选择规则" class="headerlink" title="打印方法与基本的选择规则"></a>打印方法与基本的选择规则</h4>打印方法决定记录请求的级别。例如，如果 L 是一个 logger 实例，那么，语句 L.info(“..”)是一条级别为 INFO的记录语句。记录请求的级别在高于或等于其 logger 的有效级别时被称为被启用，否则，称为被禁用。记录请求级别为 p，其 logger的有效级别为 q，只有则当 p&gt;=q时，该请求才会被执行。<br>该规则是 logback 的核心。级别排序为： TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</li></ol><h3 id="四、logback的默认配置"><a href="#四、logback的默认配置" class="headerlink" title="四、logback的默认配置"></a>四、logback的默认配置</h3><p>如果配置文件 logback-test.xml 和 logback.xml 都不存在，那么 logback 默认地会调用BasicConfigurator ，创建一个最小化配置。最小化配置由一个关联到根 logger 的ConsoleAppender 组成。输出用模式为%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 的 PatternLayoutEncoder 进行格式化。root logger 默认级别是 DEBUG。　</p><h4 id="Logback的配置文件"><a href="#Logback的配置文件" class="headerlink" title="Logback的配置文件"></a>Logback的配置文件</h4><p><strong>Logback</strong> 配置文件的语法非常灵活。正因为灵活，所以无法用 DTD 或 XML schema 进行定义。尽管如此，可以这样描述配置文件的基本结构：以&lt;configuration&gt;开头，后面有零个或多个&lt;appender&gt;元素，有零个或多个&lt;logger&gt;元素，有最多一个&lt;root&gt;元素。</p><h4 id="Logback默认配置的步骤"><a href="#Logback默认配置的步骤" class="headerlink" title="Logback默认配置的步骤"></a>Logback默认配置的步骤</h4><ul><li>尝试在 classpath下查找文件logback-test.xml；</li><li>如果文件不存在，则查找文件logback.xml；</li><li>如果两个文件都不存在，logback用BasicConfigurator自动对自己进行配置，这会导致记录输出到控制台。</li></ul><h3 id="五、logback-xml常用配置详解"><a href="#五、logback-xml常用配置详解" class="headerlink" title="五、logback.xml常用配置详解"></a>五、logback.xml常用配置详解</h3><p> <img src="https://img-blog.csdn.net/20180402204701487?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW95dTE5OTEwMzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="根节点-lt-configuration-gt-，包含下面三个属性："><a href="#根节点-lt-configuration-gt-，包含下面三个属性：" class="headerlink" title="根节点&lt;configuration&gt;，包含下面三个属性："></a>根节点&lt;configuration&gt;，包含下面三个属性：</h4><p>　　　　<strong>scan</strong>: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。<br>　　　　<strong>scanPeriod</strong>: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。<br>　　　　<strong>debug</strong>: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。<br>　　例如：<br>　　　　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; </span><br><span class="line">　　　　　　&lt;!--其他配置省略--&gt; </span><br><span class="line">　　　　&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h4 id="子节点-lt-contextName-gt-：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用-lt-contextName-gt-设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。"><a href="#子节点-lt-contextName-gt-：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用-lt-contextName-gt-设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。" class="headerlink" title="子节点&lt;contextName&gt;：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用&lt;contextName&gt;设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。"></a>子节点&lt;contextName&gt;：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用&lt;contextName&gt;设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。</h4><p>　　例如：　　　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; </span><br><span class="line">　　　　　　&lt;contextName&gt;myAppName&lt;/contextName&gt; </span><br><span class="line">　　　　　　&lt;!--其他配置省略--&gt;</span><br><span class="line">　　　　&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="子节点-lt-property-gt-：用来定义变量值，它有两个属性name和value，通过-lt-property-gt-定义的值会被插入到logger上下文中，可以使“-”来使用变量。"><a href="#子节点-lt-property-gt-：用来定义变量值，它有两个属性name和value，通过-lt-property-gt-定义的值会被插入到logger上下文中，可以使“-”来使用变量。" class="headerlink" title="子节点&lt;property&gt; ：用来定义变量值，它有两个属性name和value，通过&lt;property&gt;定义的值会被插入到logger上下文中，可以使“${}”来使用变量。"></a>子节点&lt;property&gt; ：用来定义变量值，它有两个属性name和value，通过&lt;property&gt;定义的值会被插入到logger上下文中，可以使“${}”来使用变量。</h4><p>　　　　name: 变量的名称<br>　　　　value: 的值时变量定义的值<br>　　例如：　　　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; </span><br><span class="line">　　　　　　&lt;property name=&quot;APP_Name&quot; value=&quot;myAppName&quot; /&gt; </span><br><span class="line">　　　　　　&lt;contextName&gt;$&#123;APP_Name&#125;&lt;/contextName&gt; </span><br><span class="line">　　　　　　&lt;!--其他配置省略--&gt; </span><br><span class="line">　　　　&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="子节点-lt-timestamp-gt-：获取时间戳字符串，他有两个属性key和datePattern"><a href="#子节点-lt-timestamp-gt-：获取时间戳字符串，他有两个属性key和datePattern" class="headerlink" title="子节点&lt;timestamp&gt;：获取时间戳字符串，他有两个属性key和datePattern"></a>子节点&lt;timestamp&gt;：获取时间戳字符串，他有两个属性key和datePattern</h4><p>　　　　<strong>key</strong>: 标识此&lt;timestamp&gt; 的名字；<br>　　　　<strong>datePattern</strong>: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。<br>　　例如：　　　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; </span><br><span class="line">　　　　　　&lt;timestamp key=&quot;bySecond&quot; datePattern=&quot;yyyyMMdd&apos;T&apos;HHmmss&quot;/&gt; </span><br><span class="line">　　　　　　&lt;contextName&gt;$&#123;bySecond&#125;&lt;/contextName&gt; </span><br><span class="line">　　　　　　&lt;!-- 其他配置省略--&gt; </span><br><span class="line">　　　　&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="子节点-lt-appender-gt-：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名"><a href="#子节点-lt-appender-gt-：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名" class="headerlink" title="子节点&lt;appender&gt;：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名"></a>子节点&lt;appender&gt;：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名</h4><h5 id="ConsoleAppender-把日志输出到控制台，有以下子节点："><a href="#ConsoleAppender-把日志输出到控制台，有以下子节点：" class="headerlink" title="ConsoleAppender 把日志输出到控制台，有以下子节点："></a>ConsoleAppender 把日志输出到控制台，有以下子节点：</h5><p>　　　　　　&lt;encoder&gt;：对日志进行格式化。（具体参数稍后讲解 ）<br>　　　　　　&lt;target&gt;：字符串System.out(默认)或者System.err（区别不多说了）<br>　　　　例如：　　　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt; </span><br><span class="line">　　　　　　&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; </span><br><span class="line">　　　　　　&lt;encoder&gt; </span><br><span class="line">　　　　　　　　&lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n&lt;/pattern&gt; </span><br><span class="line">　　　　　　&lt;/encoder&gt; </span><br><span class="line">　　　　　　&lt;/appender&gt; </span><br><span class="line"></span><br><span class="line">　　　　　　&lt;root level=&quot;DEBUG&quot;&gt; </span><br><span class="line">　　　　　　　　&lt;appender-ref ref=&quot;STDOUT&quot; /&gt; </span><br><span class="line">　　　　　　&lt;/root&gt; </span><br><span class="line">　　　　&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>　　　　上述配置表示把&gt;=DEBUG级别的日志都输出到控制台</p><h5 id="FileAppender：把日志添加到文件，有以下子节点："><a href="#FileAppender：把日志添加到文件，有以下子节点：" class="headerlink" title="FileAppender：把日志添加到文件，有以下子节点："></a>FileAppender：把日志添加到文件，有以下子节点：</h5><p>　　　　　　<strong>&lt;file&gt;</strong>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br>　　　　　　<strong>&lt;append&gt;</strong>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br>　　　　　　<strong>&lt;encoder&gt;</strong>：对记录事件进行格式化。（具体参数稍后讲解 ）<br>　　　　　　<strong>&lt;prudent&gt;</strong>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。<br>　　　　例如：　　　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt; </span><br><span class="line">　　　　　　&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt; </span><br><span class="line">　　　　　　　　&lt;file&gt;testFile.log&lt;/file&gt; </span><br><span class="line">　　　　　　　　&lt;append&gt;true&lt;/append&gt; </span><br><span class="line">　　　　　　　　&lt;encoder&gt; </span><br><span class="line">　　　　　　　　　　&lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt; </span><br><span class="line">　　　　　　　　&lt;/encoder&gt; </span><br><span class="line">　　　　　　&lt;/appender&gt; </span><br><span class="line"></span><br><span class="line">　　　　　　&lt;root level=&quot;DEBUG&quot;&gt; </span><br><span class="line">　　　　　　&lt;appender-ref ref=&quot;FILE&quot; /&gt; </span><br><span class="line">　　　　　　&lt;/root&gt; </span><br><span class="line">　　　　&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>　　　　上述配置表示把&gt;=DEBUG级别的日志都输出到testFile.log</p><h5 id="RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点："><a href="#RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：" class="headerlink" title="RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点："></a>RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：</h5><p>　　　　　　<strong>&lt;file&gt;</strong>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br>　　　　　　<strong>&lt;append&gt;</strong>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br>　　　　　　<strong>&lt;rollingPolicy&gt;</strong> :当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类<br>　　　　　　class=”ch.qos.logback.core.rolling.TimeBasedRollingPolicy”： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：<br>　　　　　　　　<strong>&lt;fileNamePattern&gt;</strong>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。<br>如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；<br>如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。<br>　　　　　　　　<strong>&lt;maxHistory&gt;</strong>:<br>可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且&lt;maxHistory&gt;是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</p><p>　　　　　　class=”ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy”： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:<br>　　　　　　　　<strong>&lt;maxFileSize&gt;</strong>:这是活动文件的大小，默认值是10MB。<br>　　　　　　　　<strong>&lt;prudent&gt;</strong>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。 </p><p>　　　　　　<strong>&lt;triggeringPolicy&gt;</strong>: 告知 RollingFileAppender 合适激活滚动。<br>　　　　　　class=”ch.qos.logback.core.rolling.FixedWindowRollingPolicy” 根据固定窗口算法重命名文件的滚动策略。有以下子节点：<br>　　　　　　　　<strong>&lt;minIndex&gt;</strong>:窗口索引最小值<br>　　　　　　　　<strong>&lt;maxIndex&gt;</strong>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。<br>　　　　　　　　<strong>&lt;fileNamePattern&gt;</strong>:必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip<br>　　　　　　例如： 　　　　　　　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt; </span><br><span class="line">　　　　　　　　　　&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; </span><br><span class="line">　　　　　　　　　　　　　　&lt;fileNamePattern&gt;logFile.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt; </span><br><span class="line">　　　　　　　　　　　　　　&lt;maxHistory&gt;30&lt;/maxHistory&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;/rollingPolicy&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;encoder&gt; </span><br><span class="line">　　　　　　　　　　　　　　&lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;/encoder&gt; </span><br><span class="line">　　　　　　　　　　&lt;/appender&gt; </span><br><span class="line"></span><br><span class="line">　　　　　　　　　　&lt;root level=&quot;DEBUG&quot;&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;appender-ref ref=&quot;FILE&quot; /&gt; </span><br><span class="line">　　　　　　　　　　&lt;/root&gt; </span><br><span class="line">　　　　　　　　&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>　　　　　　　　上述配置表示每天生成一个日志文件，保存30天的日志文件。　　　　　　　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt; </span><br><span class="line">　　　　　　　　　　&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;file&gt;test.log&lt;/file&gt; </span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　　&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt; </span><br><span class="line">　　　　　　　　　　　　　　&lt;fileNamePattern&gt;tests.%i.log.zip&lt;/fileNamePattern&gt; </span><br><span class="line">　　　　　　　　　　　　　　&lt;minIndex&gt;1&lt;/minIndex&gt; </span><br><span class="line">　　　　　　　　　　　　　　&lt;maxIndex&gt;3&lt;/maxIndex&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;/rollingPolicy&gt; </span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　　&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt; </span><br><span class="line">　　　　　　　　　　　　　　&lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;/triggeringPolicy&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;encoder&gt; </span><br><span class="line">　　　　　　　　　　　　　　&lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;/encoder&gt; </span><br><span class="line">　　　　　　　　　　&lt;/appender&gt; </span><br><span class="line"></span><br><span class="line">　　　　　　　　　　&lt;root level=&quot;DEBUG&quot;&gt; </span><br><span class="line">　　　　　　　　　　　　&lt;appender-ref ref=&quot;FILE&quot; /&gt; </span><br><span class="line">　　　　　　　　　　&lt;/root&gt; </span><br><span class="line">　　　　　　　　&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>　　　　　　　　上述配置表示按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。<br>　　　　　　<strong>&lt;encoder&gt;</strong>：对记录事件进行格式化。负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。<br>PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个&lt;pattern&gt;节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义。</p><h5 id="还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这里就不详解了。"><a href="#还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这里就不详解了。" class="headerlink" title="还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这里就不详解了。"></a>还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这里就不详解了。</h5><p>大家可以参考官方文档（<a href="http://logback.qos.ch/documentation.html），还可以编写自己的Appender。" target="_blank" rel="noopener">http://logback.qos.ch/documentation.html），还可以编写自己的Appender。</a> </p><h5 id="子节点-lt-loger-gt-：用来设置某一个包或具体的某一个类的日志打印级别、以及指定-lt-appender-gt-。-lt-loger-gt-仅有一个name属性，一个可选的level和一个可选的addtivity属性。"><a href="#子节点-lt-loger-gt-：用来设置某一个包或具体的某一个类的日志打印级别、以及指定-lt-appender-gt-。-lt-loger-gt-仅有一个name属性，一个可选的level和一个可选的addtivity属性。" class="headerlink" title="子节点&lt;loger&gt;：用来设置某一个包或具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。&lt;loger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性。"></a>子节点&lt;loger&gt;：用来设置某一个包或具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。&lt;loger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性。</h5><p>可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个loger<br>　　　　name: 用来指定受此loger约束的某一个包或者具体的某一个类。<br>　　　　level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前loger将会继承上级的级别。<br>addtivity: 是否向上级loger传递打印信息。默认是true。同&lt;loger&gt;一样，可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个loger。</p><h5 id="子节点-lt-root-gt-它也是-lt-loger-gt-元素，但是它是根loger-是所有-lt-loger-gt-的上级。只有一个level属性，因为name已经被命名为”root”-且已经是最上级了。"><a href="#子节点-lt-root-gt-它也是-lt-loger-gt-元素，但是它是根loger-是所有-lt-loger-gt-的上级。只有一个level属性，因为name已经被命名为”root”-且已经是最上级了。" class="headerlink" title="子节点&lt;root&gt;:它也是&lt;loger&gt;元素，但是它是根loger,是所有&lt;loger&gt;的上级。只有一个level属性，因为name已经被命名为”root”,且已经是最上级了。"></a>子节点&lt;root&gt;:它也是&lt;loger&gt;元素，但是它是根loger,是所有&lt;loger&gt;的上级。只有一个level属性，因为name已经被命名为”root”,且已经是最上级了。</h5><p>　　　　level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG。 </p><h3 id="六、常用loger配置"><a href="#六、常用loger配置" class="headerlink" title="六、常用loger配置"></a>六、常用loger配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span><br><span class="line">&lt;logger name=&quot;org.hibernate.type.descriptor.sql.BasicBinder&quot; level=&quot;TRACE&quot; /&gt;</span><br><span class="line">&lt;logger name=&quot;org.hibernate.type.descriptor.sql.BasicExtractor&quot; level=&quot;DEBUG&quot; /&gt;</span><br><span class="line">&lt;logger name=&quot;org.hibernate.SQL&quot; level=&quot;DEBUG&quot; /&gt;</span><br><span class="line">&lt;logger name=&quot;org.hibernate.engine.QueryParameters&quot; level=&quot;DEBUG&quot; /&gt;</span><br><span class="line">&lt;logger name=&quot;org.hibernate.engine.query.HQLQueryPlan&quot; level=&quot;DEBUG&quot; /&gt;</span><br><span class="line">&lt;!--myibatis log configure--&gt;</span><br><span class="line">&lt;logger name=&quot;com.apache.ibatis&quot; level=&quot;TRACE&quot;/&gt;</span><br><span class="line">&lt;logger name=&quot;java.sql.Connection&quot; level=&quot;DEBUG&quot;/&gt;</span><br><span class="line">&lt;logger name=&quot;java.sql.Statement&quot; level=&quot;DEBUG&quot;/&gt;</span><br><span class="line">&lt;logger name=&quot;java.sql.PreparedStatement&quot; level=&quot;DEBUG&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="七、Demo"><a href="#七、Demo" class="headerlink" title="七、Demo"></a>七、Demo</h3><h4 id="添加依赖包logback使用需要和slf4j一起使用，所以总共需要添加依赖的包有slf4j-api"><a href="#添加依赖包logback使用需要和slf4j一起使用，所以总共需要添加依赖的包有slf4j-api" class="headerlink" title="添加依赖包logback使用需要和slf4j一起使用，所以总共需要添加依赖的包有slf4j-api"></a>添加依赖包logback使用需要和slf4j一起使用，所以总共需要添加依赖的包有slf4j-api</h4><p>logback使用需要和slf4j一起使用，所以总共需要添加依赖的包有slf4j-api.jar，logback-core.jar，logback-classic.jar，logback-access.jar这个暂时用不到所以不添加依赖了，maven配置　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">　　　　&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">　　　　&lt;logback.version&gt;1.1.7&lt;/logback.version&gt;</span><br><span class="line">　　　　&lt;slf4j.version&gt;1.7.21&lt;/slf4j.version&gt;</span><br><span class="line">　　&lt;/properties&gt;</span><br><span class="line">　　&lt;dependencies&gt;</span><br><span class="line">　　　　&lt;dependency&gt;</span><br><span class="line">　　　　　　&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">　　　　　　&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">　　　　　　&lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">　　　　　　&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">　　　　&lt;/dependency&gt;</span><br><span class="line">　　　　&lt;dependency&gt;</span><br><span class="line">　　　　　　&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">　　　　　　&lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">　　　　　　&lt;version&gt;$&#123;logback.version&#125;&lt;/version&gt;</span><br><span class="line">　　　　&lt;/dependency&gt;</span><br><span class="line">　　　　&lt;dependency&gt;</span><br><span class="line">　　　　　　&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">　　　　　　&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">　　　　　　&lt;version&gt;$&#123;logback.version&#125;&lt;/version&gt;</span><br><span class="line">　　　　　　&lt;/dependency&gt;</span><br><span class="line">　　&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="logback-xml配置"><a href="#logback-xml配置" class="headerlink" title="logback.xml配置"></a>logback.xml配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration debug=&quot;false&quot;&gt;</span><br><span class="line">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span><br><span class="line">&lt;property name=&quot;LOG_HOME&quot; value=&quot;/home&quot; /&gt;</span><br><span class="line">&lt;!-- 控制台输出 --&gt;</span><br><span class="line">&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">&lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">&lt;/encoder&gt;</span><br><span class="line">&lt;/appender&gt;</span><br><span class="line">&lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">&lt;!--日志文件输出的文件名--&gt;</span><br><span class="line">&lt;FileNamePattern&gt;$&#123;LOG_HOME&#125;/TestWeb.log.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt;</span><br><span class="line">&lt;!--日志文件保留天数--&gt;</span><br><span class="line">&lt;MaxHistory&gt;30&lt;/MaxHistory&gt;</span><br><span class="line">&lt;/rollingPolicy&gt;</span><br><span class="line">&lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">&lt;/encoder&gt;</span><br><span class="line">&lt;!--日志文件最大的大小--&gt;</span><br><span class="line">&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</span><br><span class="line">&lt;MaxFileSize&gt;10MB&lt;/MaxFileSize&gt;</span><br><span class="line">&lt;/triggeringPolicy&gt;</span><br><span class="line">&lt;/appender&gt;</span><br><span class="line">&lt;!-- 日志输出级别 --&gt;</span><br><span class="line">&lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h4><p>　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">　　* Hello world!</span><br><span class="line">　　*/</span><br><span class="line">　　public class App &#123;</span><br><span class="line">　　private final static Logger logger = LoggerFactory.getLogger(App.class);</span><br><span class="line">　　　　public static void main(String[] args) &#123;</span><br><span class="line">　　　　　　logger.info(&quot;logback 成功了&quot;);</span><br><span class="line">　　　　　　logger.error(&quot;logback 成功了&quot;);</span><br><span class="line">　　　　　　logger.debug(&quot;logback 成功了&quot;);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><h3 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h3><p>logback的配置，需要配置输出源appender，打日志的loger（子节点）和root（根节点），实际上，它输出日志是从子节点开始，子节点如果有输出源直接输入，如果无，判断配置的addtivity，是否像上级传递，即是否向root传递，传递则采用root的输出源，否则不输出日志。</p><p>相关文章：<br>行走在云端的愚公    <a href="http://www.cnblogs.com/warking/p/5710303.html" target="_blank" rel="noopener">http://www.cnblogs.com/warking/p/5710303.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、logback的介绍&quot;&gt;&lt;a href=&quot;#一、logback的介绍&quot; class=&quot;headerlink&quot; title=&quot;一、logback的介绍&quot;&gt;&lt;/a&gt;一、logback的介绍&lt;/h3&gt;&lt;p&gt;　　Logback是由log4j创始人设计的另一个开源日志组
      
    
    </summary>
    
      <category term="java" scheme="http://github.lushunde.com/categories/java/"/>
    
    
      <category term="logback" scheme="http://github.lushunde.com/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>Centos1708使用systemctl</title>
    <link href="http://github.lushunde.com/2018/03/18/Centos1708%E4%BD%BF%E7%94%A8systemctl/"/>
    <id>http://github.lushunde.com/2018/03/18/Centos1708使用systemctl/</id>
    <published>2018-03-18T14:43:27.000Z</published>
    <updated>2018-03-18T15:01:34.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。 </p><h3 id="启动一个服务：systemctl-start-firewalld-service"><a href="#启动一个服务：systemctl-start-firewalld-service" class="headerlink" title="启动一个服务：systemctl start firewalld.service"></a>启动一个服务：systemctl start firewalld.service</h3><h3 id="关闭一个服务：systemctl-stop-firewalld-service"><a href="#关闭一个服务：systemctl-stop-firewalld-service" class="headerlink" title="关闭一个服务：systemctl stop firewalld.service"></a>关闭一个服务：systemctl stop firewalld.service</h3><h3 id="重启一个服务：systemctl-restart-firewalld-service"><a href="#重启一个服务：systemctl-restart-firewalld-service" class="headerlink" title="重启一个服务：systemctl restart firewalld.service"></a>重启一个服务：systemctl restart firewalld.service</h3><h3 id="显示一个服务的状态：systemctl-status-firewalld-service"><a href="#显示一个服务的状态：systemctl-status-firewalld-service" class="headerlink" title="显示一个服务的状态：systemctl status firewalld.service"></a>显示一个服务的状态：systemctl status firewalld.service</h3><h3 id="在开机时启用一个服务：systemctl-enable-firewalld-service"><a href="#在开机时启用一个服务：systemctl-enable-firewalld-service" class="headerlink" title="在开机时启用一个服务：systemctl enable firewalld.service"></a>在开机时启用一个服务：systemctl enable firewalld.service</h3><h3 id="在开机时禁用一个服务：systemctl-disable-firewalld-service"><a href="#在开机时禁用一个服务：systemctl-disable-firewalld-service" class="headerlink" title="在开机时禁用一个服务：systemctl disable firewalld.service"></a>在开机时禁用一个服务：systemctl disable firewalld.service</h3><h3 id="查看服务是否开机启动：systemctl-is-enabled-firewalld-service"><a href="#查看服务是否开机启动：systemctl-is-enabled-firewalld-service" class="headerlink" title="查看服务是否开机启动：systemctl is-enabled firewalld.service"></a>查看服务是否开机启动：systemctl is-enabled firewalld.service</h3><h3 id="查看已启动的服务列表：systemctl-list-unit-files-grep-enabled"><a href="#查看已启动的服务列表：systemctl-list-unit-files-grep-enabled" class="headerlink" title="查看已启动的服务列表：systemctl list-unit-files | grep enabled"></a>查看已启动的服务列表：systemctl list-unit-files | grep enabled</h3><h3 id="查看启动失败的服务列表：systemctl-–failed"><a href="#查看启动失败的服务列表：systemctl-–failed" class="headerlink" title="查看启动失败的服务列表：systemctl –failed"></a>查看启动失败的服务列表：systemctl –failed</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;systemctl&quot;&gt;&lt;a href=&quot;#systemctl&quot; class=&quot;headerlink&quot; title=&quot;systemctl&quot;&gt;&lt;/a&gt;systemctl&lt;/h2&gt;&lt;p&gt;systemctl是CentOS7的服务管理工具中主要的工具，它融合之前servic
      
    
    </summary>
    
      <category term="linux" scheme="http://github.lushunde.com/categories/linux/"/>
    
    
      <category term="centos7.4" scheme="http://github.lushunde.com/tags/centos7-4/"/>
    
  </entry>
  
  <entry>
    <title>Centos1708防火墙管理</title>
    <link href="http://github.lushunde.com/2018/03/18/Centos1708%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%A1%E7%90%86/"/>
    <id>http://github.lushunde.com/2018/03/18/Centos1708防火墙管理/</id>
    <published>2018-03-18T14:43:00.000Z</published>
    <updated>2018-03-18T15:06:08.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-firewall服务常用命令"><a href="#1-firewall服务常用命令" class="headerlink" title="1.firewall服务常用命令"></a>1.firewall服务常用命令</h2><h3 id="1-1-查看firewall服务状态"><a href="#1-1-查看firewall服务状态" class="headerlink" title="1.1 查看firewall服务状态"></a>1.1 查看firewall服务状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# systemctl status firewalld.service</span><br></pre></td></tr></table></figure><h3 id="1-2-启动firewall服务"><a href="#1-2-启动firewall服务" class="headerlink" title="1.2 启动firewall服务"></a>1.2 启动firewall服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# systemctl start firewalld.service</span><br></pre></td></tr></table></figure><h3 id="1-3-关闭firewall服务"><a href="#1-3-关闭firewall服务" class="headerlink" title="1.3 关闭firewall服务"></a>1.3 关闭firewall服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h3 id="1-4-禁止firewall服务开机启动"><a href="#1-4-禁止firewall服务开机启动" class="headerlink" title="1.4 禁止firewall服务开机启动"></a>1.4 禁止firewall服务开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h2 id="2-firewall的常用命令"><a href="#2-firewall的常用命令" class="headerlink" title="2.firewall的常用命令"></a>2.firewall的常用命令</h2><h3 id="2-1-查看firewall的状态"><a href="#2-1-查看firewall的状态" class="headerlink" title="2.1 查看firewall的状态"></a>2.1 查看firewall的状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --state</span><br></pre></td></tr></table></figure><h3 id="2-2-查看防火墙规则"><a href="#2-2-查看防火墙规则" class="headerlink" title="2.2 查看防火墙规则"></a>2.2 查看防火墙规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --list-all</span><br></pre></td></tr></table></figure><h3 id="2-3-查看版本"><a href="#2-3-查看版本" class="headerlink" title="2.3 查看版本"></a>2.3 查看版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --version</span><br></pre></td></tr></table></figure><h3 id="2-4-查看所有开放端口"><a href="#2-4-查看所有开放端口" class="headerlink" title="2.4 查看所有开放端口"></a>2.4 查看所有开放端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><h3 id="2-5-更新防火墙规则"><a href="#2-5-更新防火墙规则" class="headerlink" title="2.5 更新防火墙规则"></a>2.5 更新防火墙规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="2-6-查看区域信息"><a href="#2-6-查看区域信息" class="headerlink" title="2.6 查看区域信息"></a>2.6 查看区域信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --get-active-zones</span><br></pre></td></tr></table></figure><h3 id="2-7查看指定所属区域"><a href="#2-7查看指定所属区域" class="headerlink" title="2.7查看指定所属区域"></a>2.7查看指定所属区域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --get-zone-of-interface=ens33</span><br></pre></td></tr></table></figure><h3 id="2-8-拒绝所有数据包-包括ssh连接等"><a href="#2-8-拒绝所有数据包-包括ssh连接等" class="headerlink" title="2.8 拒绝所有数据包 [包括ssh连接等]"></a>2.8 拒绝所有数据包 [包括ssh连接等]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --panic-on</span><br></pre></td></tr></table></figure><h3 id="2-9-取消拒绝所有数据包"><a href="#2-9-取消拒绝所有数据包" class="headerlink" title="2.9 取消拒绝所有数据包"></a>2.9 取消拒绝所有数据包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 ~]# firewall-cmd --panic-off</span><br></pre></td></tr></table></figure><h3 id="2-10-查看是否拒绝数据包"><a href="#2-10-查看是否拒绝数据包" class="headerlink" title="2.10 查看是否拒绝数据包"></a>2.10 查看是否拒绝数据包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 ~]# firewall-cmd --query-panic</span><br></pre></td></tr></table></figure><h2 id="3-添加开放端口-命令行模式"><a href="#3-添加开放端口-命令行模式" class="headerlink" title="3.添加开放端口 命令行模式"></a>3.添加开放端口 命令行模式</h2><h3 id="3-1-添加一个端口"><a href="#3-1-添加一个端口" class="headerlink" title="3.1 添加一个端口"></a>3.1 添加一个端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><pre><code>permanent：永久生效，没有此参数重启后失效</code></pre><h3 id="3-2-重载后生效"><a href="#3-2-重载后生效" class="headerlink" title="3.2 重载后生效"></a>3.2 重载后生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="3-3-查看端口"><a href="#3-3-查看端口" class="headerlink" title="3.3 查看端口"></a>3.3 查看端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --zone=public --query-port=80/tcp</span><br></pre></td></tr></table></figure><h3 id="3-4-删除端口"><a href="#3-4-删除端口" class="headerlink" title="3.4 删除端口"></a>3.4 删除端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CENTOS7-TEST1 /]# firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-firewall服务常用命令&quot;&gt;&lt;a href=&quot;#1-firewall服务常用命令&quot; class=&quot;headerlink&quot; title=&quot;1.firewall服务常用命令&quot;&gt;&lt;/a&gt;1.firewall服务常用命令&lt;/h2&gt;&lt;h3 id=&quot;1-1-查看fir
      
    
    </summary>
    
      <category term="linux" scheme="http://github.lushunde.com/categories/linux/"/>
    
    
      <category term="centos7.4" scheme="http://github.lushunde.com/tags/centos7-4/"/>
    
  </entry>
  
  <entry>
    <title>Centos1708更新系统yum源</title>
    <link href="http://github.lushunde.com/2018/03/18/Centos1708%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9Fyum%E6%BA%90/"/>
    <id>http://github.lushunde.com/2018/03/18/Centos1708更新系统yum源/</id>
    <published>2018-03-18T14:42:37.000Z</published>
    <updated>2018-03-18T14:59:12.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装wget软件"><a href="#安装wget软件" class="headerlink" title="安装wget软件"></a>安装wget软件</h2><p>先后安装以下三个命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# yum -y install wget</span><br><span class="line">[root@localhost network-scripts]# yum -y install setup</span><br><span class="line">[root@localhost network-scripts]# yum -y install perl</span><br></pre></td></tr></table></figure></p><h2 id="在CentOS-7下更改yum源与更新系统"><a href="#在CentOS-7下更改yum源与更新系统" class="headerlink" title="在CentOS 7下更改yum源与更新系统"></a>在CentOS 7下更改yum源与更新系统</h2><h3 id="1-1-首先备份-etc-yum-repos-d-CentOS-Base-repo"><a href="#1-1-首先备份-etc-yum-repos-d-CentOS-Base-repo" class="headerlink" title="1.1 首先备份/etc/yum.repos.d/CentOS-Base.repo"></a>1.1 首先备份/etc/yum.repos.d/CentOS-Base.repo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h3 id="1-2-进入yum源配置文件所在文件夹"><a href="#1-2-进入yum源配置文件所在文件夹" class="headerlink" title="1.2 进入yum源配置文件所在文件夹"></a>1.2 进入yum源配置文件所在文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# cd /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><h3 id="1-3-下载163的yum源配置文件，放入-etc-yum-repos-d-操作前请做好相应备份"><a href="#1-3-下载163的yum源配置文件，放入-etc-yum-repos-d-操作前请做好相应备份" class="headerlink" title="1.3 下载163的yum源配置文件，放入/etc/yum.repos.d/(操作前请做好相应备份)"></a>1.3 下载163的yum源配置文件，放入/etc/yum.repos.d/(操作前请做好相应备份)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure><h3 id="1-4-运行yum-makecache生成缓存"><a href="#1-4-运行yum-makecache生成缓存" class="headerlink" title="1.4 运行yum makecache生成缓存"></a>1.4 运行yum makecache生成缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum makecache</span><br></pre></td></tr></table></figure><h3 id="1-5-更新系统-时间比较久-主要看个人网速"><a href="#1-5-更新系统-时间比较久-主要看个人网速" class="headerlink" title="1.5 更新系统(时间比较久,主要看个人网速)"></a>1.5 更新系统(时间比较久,主要看个人网速)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum -y update</span><br></pre></td></tr></table></figure><h3 id="1-6-安装vim编辑器"><a href="#1-6-安装vim编辑器" class="headerlink" title="1.6 安装vim编辑器"></a>1.6 安装vim编辑器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum -y install vim*</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装wget软件&quot;&gt;&lt;a href=&quot;#安装wget软件&quot; class=&quot;headerlink&quot; title=&quot;安装wget软件&quot;&gt;&lt;/a&gt;安装wget软件&lt;/h2&gt;&lt;p&gt;先后安装以下三个命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;
      
    
    </summary>
    
      <category term="linux" scheme="http://github.lushunde.com/categories/linux/"/>
    
    
      <category term="centos7.4" scheme="http://github.lushunde.com/tags/centos7-4/"/>
    
  </entry>
  
  <entry>
    <title>Centos1708网络配置</title>
    <link href="http://github.lushunde.com/2018/03/18/Centos1708%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>http://github.lushunde.com/2018/03/18/Centos1708网络配置/</id>
    <published>2018-03-18T14:41:49.000Z</published>
    <updated>2018-03-18T14:53:08.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><h2 id="0-初始化查看ip配置"><a href="#0-初始化查看ip配置" class="headerlink" title="0.初始化查看ip配置"></a>0.初始化查看ip配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">inet 127.0.0.1/8 scope host lo</span><br><span class="line">   valid_lft forever preferred_lft forever</span><br><span class="line">inet6 ::1/128 scope host </span><br><span class="line">   valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">link/ether 00:0c:29:ed:8c:a7 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>这个表示没有开启ip连接。</p><h2 id="1-自动获取ip方式-NET模式-："><a href="#1-自动获取ip方式-NET模式-：" class="headerlink" title="1.自动获取ip方式[NET模式]："></a>1.自动获取ip方式[NET模式]：</h2><h3 id="1-1-启用网卡，自动连接IP地址"><a href="#1-1-启用网卡，自动连接IP地址" class="headerlink" title="1.1 启用网卡，自动连接IP地址"></a>1.1 启用网卡，自动连接IP地址</h3><p>修改 /etc/sysconfig/network-scripts 文件夹 的 ifcfg-ens33文件<br>    <strong>ONBOOT=yes</strong>    #设置启用网络开关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# vi ifcfg-ens33 </span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">#BOOTPROTO=static</span><br><span class="line">#IPADDR=192.168.187.150</span><br><span class="line">#NETMASK=255.255.255.0</span><br><span class="line">#MM_CONTROLLED=no</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=76e40da3-394a-4b41-8b97-0b108e6c9241</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=no</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure></p><h3 id="1-2-重启网络服务"><a href="#1-2-重启网络服务" class="headerlink" title="1.2 重启网络服务"></a>1.2 重启网络服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br></pre></td></tr></table></figure><h3 id="1-3-查看网络配置"><a href="#1-3-查看网络配置" class="headerlink" title="1.3 查看网络配置"></a>1.3 查看网络配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 00:0c:29:32:38:be brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.187.135/24 brd 192.168.187.255 scope global dynamic ens33</span><br><span class="line">       valid_lft 1713sec preferred_lft 1713sec</span><br><span class="line">    inet6 fe80::6406:1360:6fca:b796/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h3 id="1-4-完成配置"><a href="#1-4-完成配置" class="headerlink" title="1.4 完成配置"></a>1.4 完成配置</h3><h2 id="2-手动配置静态IP方式-NET模式"><a href="#2-手动配置静态IP方式-NET模式" class="headerlink" title="2.手动配置静态IP方式[NET模式]"></a>2.手动配置静态IP方式[NET模式]</h2><h3 id="2-1-配置文件位置"><a href="#2-1-配置文件位置" class="headerlink" title="2.1 配置文件位置"></a>2.1 配置文件位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# pwd</span><br><span class="line">/etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure><h3 id="2-2-编辑-ifcfg-ens33-文件"><a href="#2-2-编辑-ifcfg-ens33-文件" class="headerlink" title="2.2 编辑 ifcfg-ens33 文件"></a>2.2 编辑 ifcfg-ens33 文件</h3><pre><code>修改：BOOTPROTO 的 dhcp 修改文static  # dhcp自动获取IP， static手动设置IP添加：#BOOTPROTO=dhcp  #动态分配IP    BOOTPROTO=static    #手动设置IP    IPADDR=192.168.187.151    #手动设置IP地址    GATEWAY=192.168.187.2    #手动设置网关    METMASK=255.255.255.0    #手动设置子网掩码    ONBOOT=yes    #设置启用网络开关</code></pre><h3 id="2-3-重启网络服务"><a href="#2-3-重启网络服务" class="headerlink" title="2.3 重启网络服务"></a>2.3 重启网络服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br></pre></td></tr></table></figure><h3 id="2-4-测试联网，以下表示没配置DNS"><a href="#2-4-测试联网，以下表示没配置DNS" class="headerlink" title="2.4 测试联网，以下表示没配置DNS"></a>2.4 测试联网，以下表示没配置DNS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ping www.baidu.com</span><br><span class="line">ping: www.baidu.com: Name or service not known</span><br></pre></td></tr></table></figure><h3 id="2-5-配置-不通过网络管理器管理"><a href="#2-5-配置-不通过网络管理器管理" class="headerlink" title="2.5 配置 不通过网络管理器管理"></a>2.5 配置 不通过网络管理器管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost NetworkManager]# vi /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">添加一行：</span><br><span class="line">dns=none#不通过网络管理器管理</span><br></pre></td></tr></table></figure><h3 id="2-6-修改resolv-conf-新增dns配置"><a href="#2-6-修改resolv-conf-新增dns配置" class="headerlink" title="2.6 修改resolv.conf,新增dns配置"></a>2.6 修改resolv.conf,新增dns配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# vi /etc/resolv.conf</span><br><span class="line"># Generated by NetworkManager</span><br><span class="line">#主DNS</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">#备DNS</span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure><h3 id="2-7-重启服务并测试"><a href="#2-7-重启服务并测试" class="headerlink" title="2.7 重启服务并测试"></a>2.7 重启服务并测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br><span class="line">[root@localhost ~]# ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (119.75.216.20) 56(84) bytes of data.</span><br><span class="line">64 bytes from 127.0.0.1 (119.75.216.20): icmp_seq=1 ttl=128 time=5.13 ms</span><br><span class="line">64 bytes from 127.0.0.1 (119.75.216.20): icmp_seq=2 ttl=128 time=4.79 ms</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h1&gt;&lt;h2 id=&quot;0-初始化查看ip配置&quot;&gt;&lt;a href=&quot;#0-初始化查看ip配置&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="linux" scheme="http://github.lushunde.com/categories/linux/"/>
    
    
      <category term="centos7.4" scheme="http://github.lushunde.com/tags/centos7-4/"/>
    
  </entry>
  
  <entry>
    <title>Centos1708目录介绍</title>
    <link href="http://github.lushunde.com/2018/03/18/Centos1708%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://github.lushunde.com/2018/03/18/Centos1708目录介绍/</id>
    <published>2018-03-18T13:55:03.000Z</published>
    <updated>2018-03-18T14:22:02.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本文件系统类型"><a href="#基本文件系统类型" class="headerlink" title="基本文件系统类型"></a>基本文件系统类型</h2><pre><code>普通文件、目录文件、连接文件和特殊文件，可用file命令来识别。</code></pre><h3 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h3><pre><code>如文本文件、C语言元代码、SHELL脚本、二进制的可执行文件等，可用cat、less、more、vi、emacs来察看内容，用mv来改名。</code></pre><h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h3><pre><code>包括文件名、子目录名及其指针。它是LINUX储存文件名的唯一地方，可用ls列出目录文件。</code></pre><h3 id="连接文件"><a href="#连接文件" class="headerlink" title="连接文件"></a>连接文件</h3><pre><code>是指向同一索引节点的那些目录条目。用ls来查看是，连接文件的标志用l开头，而文件面后以&quot;-&gt;&quot;指向所连接的文件。</code></pre><h3 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h3><pre><code>LINUX的一些设备如磁盘、终端、打印机等都在文件系统中表示出来，则一类文件就是特殊文件，常放在/dev目录内。例如，软驱A称为/dev/fd0。LINUX无C：的概念，而是用/dev/had来自第一硬盘。</code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id=""><a href="#" class="headerlink" title="/"></a>/</h3><ul><li>根目录，文件的最顶端，/etc、/bin、/dev、/lib、/sbin 应该和根目录放在同一个分区，/usr/local 可以单独放置一个分区<h3 id="bin"><a href="#bin" class="headerlink" title="/bin"></a>/bin</h3></li><li>存放系统所需要的重要命令，ls，cp，mkdir 等</li><li>usr/bin 也存放了一些系统命令，这些命令对应的文件都是可执行的，普通用户可以使用大部分的命令<h3 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a>/sbin</h3></li><li>目录 可执行二进制（sbin是超级用户才能执行）<h2 id="boot"><a href="#boot" class="headerlink" title="/boot"></a>/boot</h2></li><li>存放Linux启动时内核及引导系统程序所需要的核心文件，内核文件和grub 系统引导管理器都位于此目录,遭到破坏，则系统无法启动<h3 id="dev"><a href="#dev" class="headerlink" title="/dev"></a>/dev</h3></li><li>存放Linux 系统下的所有设备文件，如光驱，磁盘等。访问该目录下的某个文件相当于访问某个硬件设备，常用的是挂在光驱<h4 id="etc-fstab"><a href="#etc-fstab" class="headerlink" title="etc/fstab"></a>etc/fstab</h4></li><li>存放系统分区信息<h3 id="home"><a href="#home" class="headerlink" title="/home"></a>/home</h3></li><li>系统默认的用户主目录<h3 id="lib"><a href="#lib" class="headerlink" title="/lib"></a>/lib</h3></li><li>主要存放动态链接库，共享程序库<h3 id="lost-found"><a href="#lost-found" class="headerlink" title="/lost+found"></a>/lost+found</h3></li><li>存放一些当系统以外崩溃或机器意外关机时产生的文件碎片<h3 id="mnt"><a href="#mnt" class="headerlink" title="/mnt"></a>/mnt</h3></li><li>用于存放挂在储存设备的挂载目录<h3 id="proc"><a href="#proc" class="headerlink" title="/proc"></a>/proc</h3></li><li>存放操作系统运行时的运行信息，如进程信息、内核信息、网络信息，如/etc/cpuinfo存放CPU的相关信息。</li><li>虚拟目录，所有文件都是内存的映射，不存在硬盘，而在内存上存储<h3 id="root"><a href="#root" class="headerlink" title="/root"></a>/root</h3></li><li>Linux超级权限用户的root目录<h3 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h3></li><li>临时文件目录，任何人都可以访问。系统软件或用户运行程序如MySQL时产生的临时文件存放到这里，此目录数据需要定期清除。重要数据不可放置在此目录下，此目录空间不宜过小<h3 id="usr"><a href="#usr" class="headerlink" title="/usr"></a>/usr</h3></li><li>应用程序存放目录，如命令、帮助文档等。<h4 id="usr-local"><a href="#usr-local" class="headerlink" title="/usr/local"></a>/usr/local</h4></li><li>安装Linux软件包时默认安装到/usr/local目录下<h4 id="usr-share"><a href="#usr-share" class="headerlink" title="/usr/share"></a>/usr/share</h4></li><li>系统共用的东西存放地，比如 /usr/share/fonts 是字体目录，/usr/share/doc和/usr/share/man帮助文件。<h3 id="var"><a href="#var" class="headerlink" title="/var"></a>/var</h3></li><li>这个目录的内容经常变动的<h4 id="var-log"><a href="#var-log" class="headerlink" title="/var/log"></a>/var/log</h4></li><li>用于存放系统日志<h4 id="var-lib"><a href="#var-lib" class="headerlink" title="/var/lib"></a>/var/lib</h4></li><li>存放系统库文件等<h4 id="var-spool"><a href="#var-spool" class="headerlink" title="/var/spool"></a>/var/spool</h4></li><li>打印机、邮件、代理服务器等假脱机目录<h3 id="sys"><a href="#sys" class="headerlink" title="/sys"></a>/sys</h3></li><li>目录与/proc类似，是一个虚拟的文件系统，主要记录与系统核心相关的信息，入系统当前已经载入的模块信息等。这个目录实际不占磁盘容量。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本文件系统类型&quot;&gt;&lt;a href=&quot;#基本文件系统类型&quot; class=&quot;headerlink&quot; title=&quot;基本文件系统类型&quot;&gt;&lt;/a&gt;基本文件系统类型&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;普通文件、目录文件、连接文件和特殊文件，可用file命令来识别。
&lt;/cod
      
    
    </summary>
    
      <category term="linux" scheme="http://github.lushunde.com/categories/linux/"/>
    
    
      <category term="centos7.4" scheme="http://github.lushunde.com/tags/centos7-4/"/>
    
  </entry>
  
  <entry>
    <title>Next主题添加酷炫特效</title>
    <link href="http://github.lushunde.com/2018/03/18/Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%85%B7%E7%82%AB%E7%89%B9%E6%95%88/"/>
    <id>http://github.lushunde.com/2018/03/18/Next主题添加酷炫特效/</id>
    <published>2018-03-17T18:54:47.000Z</published>
    <updated>2018-03-18T12:14:11.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-在右上角或者左上角实现fork-me-on-github"><a href="#1-在右上角或者左上角实现fork-me-on-github" class="headerlink" title="1.在右上角或者左上角实现fork me on github"></a>1.在右上角或者左上角实现fork me on github</h2><h3 id="实现效果图"><a href="#实现效果图" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="http://githubimg.lushunde.com/2018-03-18_024224.jpg" alt="展示效果"></p><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>点击 <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">图标地址</a> 或者 <a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">字体地址</a>  挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：<br><img src="http://githubimg.lushunde.com/2018-03-18_022708.jpg" alt="图标"><br><img src="http://githubimg.lushunde.com/2018-03-18_022814.jpg" alt="图标"><br>然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中放在 &lt;div class=”headband”&gt;&lt;/div&gt;后面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"headband"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;a href=<span class="string">"https://github.com/lushunde321"</span>&gt;&lt;img style=<span class="string">"position: absolute; top: 0; left: 0; border: 0;"</span> src=<span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png"</span> alt=<span class="string">"Fork me on GitHub"</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></p><p>并把href改为你的github地址 </p><hr><h2 id="2-添加动态背景"><a href="#2-添加动态背景" class="headerlink" title="2.添加动态背景"></a>2.添加动态背景</h2><p><img src="http://githubimg.lushunde.com/2018-03-18_152803.gif" alt="实现效果"><br>四种类型选择其一即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line">canvas_nest: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line">three_waves: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line">canvas_lines: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line">canvas_sphere: <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="3-修改文章内链接文本样式"><a href="#3-修改文章内链接文本样式" class="headerlink" title="3.修改文章内链接文本样式"></a>3.修改文章内链接文本样式</h2><h3 id="实现效果图-1"><a href="#实现效果图-1" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="http://githubimg.lushunde.com/2018-03-18_152722.gif" alt="实现效果"></p><h3 id="具体实现方法"><a href="#具体实现方法" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>修改文件 themes\next\source\css_common\components\post\post.styl，在末尾添加如下css样式，：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: <span class="comment">#3385FF;</span></span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid <span class="comment">#3385FF;</span></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: <span class="comment">#fc6423;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid <span class="comment">#fc6423;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><hr><h2 id="4-修改文章底部的那个带-号的标签"><a href="#4-修改文章底部的那个带-号的标签" class="headerlink" title="4.修改文章底部的那个带#号的标签"></a>4.修改文章底部的那个带#号的标签</h2><p>实现效果图<br>原来-&gt; <img src="http://githubimg.lushunde.com/2018-03-18_041805.jpg" alt=""><br>实现-&gt; <img src="http://githubimg.lushunde.com/2018-03-18_042104.jpg" alt=""></p><p>具体实现方法<br>修改模板/themes/next/layout/_macro/post.swig，359行 搜索 rel=”tag”&gt;#，将 # 换成以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=<span class="string">"fa fa-tag"</span>&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p><hr><h2 id="5-在每篇文章末尾统一添加“本文结束”标记"><a href="#5-在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="5.在每篇文章末尾统一添加“本文结束”标记"></a>5.在每篇文章末尾统一添加“本文结束”标记</h2><h3 id="实现效果图-2"><a href="#实现效果图-2" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="http://githubimg.lushunde.com/2018-03-18_044215.jpg" alt="s"></p><h3 id="具体实现方法-1"><a href="#具体实现方法-1" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;------本文结束  感谢阅读------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下画代码（post-footer之前三个DIV）：<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="然后打开主题配置文件（-config-yml-在末尾添加："><a href="#然后打开主题配置文件（-config-yml-在末尾添加：" class="headerlink" title="然后打开主题配置文件（_config.yml),在末尾添加："></a>然后打开主题配置文件（_config.yml),在末尾添加：</h3><p>文章末尾添加“本文结束”标记<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></p><p>完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。</p><hr><h2 id="6-修改作者头像并旋转"><a href="#6-修改作者头像并旋转" class="headerlink" title="6.修改作者头像并旋转"></a>6.修改作者头像并旋转</h2><h3 id="实现效果图："><a href="#实现效果图：" class="headerlink" title="实现效果图："></a>实现效果图：</h3><p><img src="http://githubimg.lushunde.com/2018-03-18_151325.gif" alt=""></p><h3 id="具体实现方法-2"><a href="#具体实现方法-2" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl，在里面添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: <span class="variable">$site</span>-author-image-padding;</span><br><span class="line">  max-width: <span class="variable">$site</span>-author-image-width;</span><br><span class="line">  height: <span class="variable">$site</span>-author-image-height;</span><br><span class="line">  border: <span class="variable">$site</span>-author-image-border-width solid <span class="variable">$site</span>-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 <span class="comment">#333sf;</span></span><br><span class="line"></span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="7-主页文章添加阴影效果"><a href="#7-主页文章添加阴影效果" class="headerlink" title="7.主页文章添加阴影效果"></a>7.主页文章添加阴影效果</h2><p>实现效果图<br>无阴影<img src="http://githubimg.lushunde.com/2018-03-18_045609.jpg" alt=""><br>有阴影<img src="http://githubimg.lushunde.com/2018-03-18_045746.jpg" alt=""></p><p>具体实现方法<br>打开\themes\next\source\css_custom\custom.styl,向里面加入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="8-网站字数统计-文章字数、阅读时间、全站底部字数统计"><a href="#8-网站字数统计-文章字数、阅读时间、全站底部字数统计" class="headerlink" title="8.网站字数统计 文章字数、阅读时间、全站底部字数统计"></a>8.网站字数统计 文章字数、阅读时间、全站底部字数统计</h2><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>单篇文章统计效果<br><img src="http://githubimg.lushunde.com/2018-03-18_175012.jpg" alt=""><br>底部全站字数统计效果<br><img src="http://githubimg.lushunde.com/2018-03-18_175025.jpg" alt=""></p><h3 id="配置文件插件开启"><a href="#配置文件插件开启" class="headerlink" title="配置文件插件开启"></a>配置文件插件开启</h3><p>NexT 主题默认已经集成了文章【字数统计】【阅读时长】统计功能，如果我们需要使用，只需要在主题配置文件 _config.yml 中打开 wordcount 统计功能即可。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: <span class="literal">true</span></span><br><span class="line">  wordcount: <span class="literal">true</span>         <span class="comment"># 单篇文章 字数统计</span></span><br><span class="line">  min2read: <span class="literal">true</span>          <span class="comment"># 单篇文章 阅读时长</span></span><br><span class="line">  totalcount: <span class="literal">true</span>       <span class="comment"># 网站底部 字数统计</span></span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="安装插件-hexo-wordcount-插件"><a href="#安装插件-hexo-wordcount-插件" class="headerlink" title="安装插件 hexo-wordcount 插件"></a>安装插件 hexo-wordcount 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><h3 id="修改-themes-next-layout-macro-post-swig-中"><a href="#修改-themes-next-layout-macro-post-swig-中" class="headerlink" title="修改 themes\next\layout_macro\post.swig 中"></a>修改 themes\next\layout_macro\post.swig 中</h3><ul><li><p>搜索  wordcount(post.content) 添加单位，单篇文章字数统计添加单位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">  &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li><li><p>搜索 min2read(post.content)  添加单位，单篇文章阅读时间添加单位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">  &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="底部全站字数统计-修改-themes-next-layout-partials-footer-swig-中"><a href="#底部全站字数统计-修改-themes-next-layout-partials-footer-swig-中" class="headerlink" title="底部全站字数统计 修改 themes\next\layout_partials\footer.swig 中"></a>底部全站字数统计 修改 themes\next\layout_partials\footer.swig 中</h3><ul><li>文章底部添加如下代码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"theme-info"</span>&gt;</span><br><span class="line">  &lt;div class=<span class="string">"with-love"</span>&gt;&lt;i class=<span class="string">"fa fa-file-word-o"</span>&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=<span class="string">"post-count"</span>&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="9-添加-README-md-文件"><a href="#9-添加-README-md-文件" class="headerlink" title="9.添加 README.md 文件"></a>9.添加 README.md 文件</h2><p>每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。</p><p>在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml，将 skip_render 参数的值设置为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure></p><p>保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。</p><hr><h2 id="10-隐藏网页底部powered-By-Hexo-强力驱动"><a href="#10-隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="10.隐藏网页底部powered By Hexo / 强力驱动"></a>10.隐藏网页底部powered By Hexo / 强力驱动</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>原来-&gt;<br><img src="http://githubimg.lushunde.com/2018-03-18_163502.jpg" alt=""><br>实现-&gt;<br><img src="http://githubimg.lushunde.com/2018-03-18_163156.jpg" alt=""></p><p>打开themes/next/layout/_partials/footer.swig,隐藏之间的代码即可，或者直接删除。位置如图：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 隐藏底部的代码</span><br><span class="line">  &#123;% <span class="keyword">if</span> theme.post_wordcount.totalcount %&#125;</span><br><span class="line">    &lt;span class=<span class="string">"post-meta-divider"</span>&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span class=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">      &lt;i class=<span class="string">"fa fa-area-chart"</span>&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> theme.post_wordcount.item_text %&#125;</span><br><span class="line">      &lt;span class=<span class="string">"post-meta-item-text"</span>&gt;&#123;&#123; __(<span class="string">'post.totalcount'</span>) &#125;&#125;&amp;<span class="comment">#58;&lt;/span&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &lt;span title=<span class="string">"&#123;&#123; __('post.totalcount') &#125;&#125;"</span>&gt;&#123;<span class="comment">#</span></span><br><span class="line">    <span class="comment">#&#125;&#123;&#123; totalcount(site, '0,0.0a') &#125;&#125;&#123;#</span></span><br><span class="line">  <span class="comment">#&#125;&lt;/span&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#123;% <span class="keyword">if</span> theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class=<span class="string">"powered-by"</span>&gt;&#123;<span class="comment">#</span></span><br><span class="line">  <span class="comment">#&#125;&#123;&#123; __('footer.powered', '&lt;a class="theme-link" target="_blank" href="https://hexo.io"&gt;Hexo&lt;/a&gt;') &#125;&#125;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;&lt;/div&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.footer.powered and theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;span class=<span class="string">"post-meta-divider"</span>&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;div class=<span class="string">"theme-info"</span>&gt;&#123;<span class="comment">#</span></span><br><span class="line">  <span class="comment">#&#125;&#123;&#123; __('footer.theme') &#125;&#125; &amp;mdash; &#123;#</span></span><br><span class="line">  <span class="comment">#&#125;&lt;a class="theme-link" target="_blank" href="https://github.com/iissnan/hexo-theme-next"&gt;&#123;#</span></span><br><span class="line">    <span class="comment">#&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span></span><br><span class="line">  <span class="comment">#&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; theme.version &#125;&#125;&#123;% endif %&#125;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;&lt;/div&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.footer.custom_text %&#125;</span><br><span class="line">  &lt;div class=<span class="string">"footer-custom"</span>&gt;&#123;<span class="comment">#</span></span><br><span class="line">  <span class="comment">#&#125;&#123;&#123; theme.footer.custom_text &#125;&#125;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;&lt;/div&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">文章底部结束 --&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://githubimg.lushunde.com/2018-03-18_163428.jpg" alt=""></p><hr><h2 id="11-文章加密访问"><a href="#11-文章加密访问" class="headerlink" title="11.文章加密访问"></a>11.文章加密访问</h2><h3 id="实现效果图-3"><a href="#实现效果图-3" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="http://githubimg.lushunde.com/2018-03-18_161822.gif" alt=""></p><h3 id="具体实现方法-3"><a href="#具体实现方法-3" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在开始meta后面位置（第5行左右）插入这样一段代码：<br>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="然后在文章上写成类似这样："><a href="#然后在文章上写成类似这样：" class="headerlink" title="然后在文章上写成类似这样："></a>然后在文章上写成类似这样：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Next主题添加酷炫特效</span><br><span class="line">date: 2018-03-18 02:54:47</span><br><span class="line">categories: github</span><br><span class="line">tags: Next </span><br><span class="line">password: 123</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><h2 id="12-不蒜子统计-由-panzhitian-贡献"><a href="#12-不蒜子统计-由-panzhitian-贡献" class="headerlink" title="12. 不蒜子统计 由 panzhitian 贡献"></a>12. 不蒜子统计 由 panzhitian 贡献</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://githubimg.lushunde.com/2018-03-18_201119.jpg" alt=""><br><img src="http://githubimg.lushunde.com/2018-03-18_201141.jpg" alt=""></p><h3 id="编辑-主题配置文件-中的busuanzi-count的配置项。"><a href="#编辑-主题配置文件-中的busuanzi-count的配置项。" class="headerlink" title="编辑 主题配置文件 中的busuanzi_count的配置项。"></a>编辑 主题配置文件 中的busuanzi_count的配置项。</h3><p>注意： 此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后<br>当enable: true时，代表开启全局开关。若site_uv、site_pv、page_pv的值均为false时，不蒜子仅作记录而不会在页面上显示。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  <span class="comment"># 启用统计</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 网站底部显示</span></span><br><span class="line">  site_uv: <span class="literal">true</span></span><br><span class="line">  site_uv_header: &lt;i class=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt; 本站访客</span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  <span class="comment"># 网站底部显示</span></span><br><span class="line">  site_pv: <span class="literal">true</span></span><br><span class="line">  site_pv_header: &lt;i class=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt; 本站访问</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  <span class="comment"># 文章顶部显示</span></span><br><span class="line">  page_pv: <span class="literal">true</span></span><br><span class="line">  page_pv_header: &lt;i class=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt; 本文阅读</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-在右上角或者左上角实现fork-me-on-github&quot;&gt;&lt;a href=&quot;#1-在右上角或者左上角实现fork-me-on-github&quot; class=&quot;headerlink&quot; title=&quot;1.在右上角或者左上角实现fork me on github&quot;&gt;
      
    
    </summary>
    
      <category term="github" scheme="http://github.lushunde.com/categories/github/"/>
    
    
      <category term="Next" scheme="http://github.lushunde.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 下载安装Next主题（三）</title>
    <link href="http://github.lushunde.com/2018/03/18/Hexo-%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85Next%E4%B8%BB%E9%A2%98/"/>
    <id>http://github.lushunde.com/2018/03/18/Hexo-下载安装Next主题/</id>
    <published>2018-03-17T17:22:30.000Z</published>
    <updated>2018-03-17T18:10:33.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next主题文档地址：官方文档"><a href="#Next主题文档地址：官方文档" class="headerlink" title="Next主题文档地址：官方文档"></a>Next主题文档地址：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">官方文档</a></h1><ul><li>官方详细，此处略，可以查看官方文档 </li></ul><h2 id="安装-NexT"><a href="#安装-NexT" class="headerlink" title="安装 NexT"></a>安装 NexT</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><h3 id="下载-NexT-版本"><a href="#下载-NexT-版本" class="headerlink" title="下载 NexT 版本"></a>下载 NexT 版本</h3><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><h3 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a>启用 NexT 主题</h3><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><h3 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h3><h3 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h3><h3 id="设置-侧栏"><a href="#设置-侧栏" class="headerlink" title="设置 侧栏"></a>设置 侧栏</h3><h3 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h3><h3 id="站点描述"><a href="#站点描述" class="headerlink" title="站点描述"></a>站点描述</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Next主题文档地址：官方文档&quot;&gt;&lt;a href=&quot;#Next主题文档地址：官方文档&quot; class=&quot;headerlink&quot; title=&quot;Next主题文档地址：官方文档&quot;&gt;&lt;/a&gt;Next主题文档地址：&lt;a href=&quot;http://theme-next.iis
      
    
    </summary>
    
      <category term="github" scheme="http://github.lushunde.com/categories/github/"/>
    
    
      <category term="Next" scheme="http://github.lushunde.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages  域名绑定（二）</title>
    <link href="http://github.lushunde.com/2018/03/17/github-pages-%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/"/>
    <id>http://github.lushunde.com/2018/03/17/github-pages-域名绑定/</id>
    <published>2018-03-17T15:22:39.000Z</published>
    <updated>2018-03-18T13:16:40.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next主题文档地址：官方文档"><a href="#Next主题文档地址：官方文档" class="headerlink" title="Next主题文档地址：官方文档"></a>Next主题文档地址：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">官方文档</a></h1><hr><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>lushunde321.github.io 已经可以正常显示 博客内容</li><li>已经有一个域名 我的以 万网 lushunde.com 为例    <pre><code>注：cn域名需要备案，国际域名可以不用备案。备案比较麻烦，大约需要40天。</code></pre></li></ul><h2 id="项目添加CNAME文件-避免每次上传文件设置github的个人域名"><a href="#项目添加CNAME文件-避免每次上传文件设置github的个人域名" class="headerlink" title="项目添加CNAME文件(避免每次上传文件设置github的个人域名)"></a>项目添加CNAME文件(避免每次上传文件设置github的个人域名)</h2><p>不需要后缀，只需要名字CNAME即可，打开添加 自己的域名，我的使用二级域名  github.lushunde.com<br>文件放置位置  ..\Hexo\source 文件夹下<br><img src="http://githubimg.lushunde.com/2018-03-18_030528.jpg" alt="文件位置图片"></p><h2 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h2><p> 登录到自己的域名供应商，我的万网<br>        解析域名 添加一条规则，CNAME规则，具体如下图：<br><img src="http://githubimg.lushunde.com/2018-01-23_001701.png" alt="这里写图片描述"><br>点击确定后大约1分钟后即可通过二级自定义域名访问github pages中的blog了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Next主题文档地址：官方文档&quot;&gt;&lt;a href=&quot;#Next主题文档地址：官方文档&quot; class=&quot;headerlink&quot; title=&quot;Next主题文档地址：官方文档&quot;&gt;&lt;/a&gt;Next主题文档地址：&lt;a href=&quot;http://theme-next.iis
      
    
    </summary>
    
      <category term="github" scheme="http://github.lushunde.com/categories/github/"/>
    
    
      <category term="hexo" scheme="http://github.lushunde.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Centos1708系统安装</title>
    <link href="http://github.lushunde.com/2018/03/15/Centos1708%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://github.lushunde.com/2018/03/15/Centos1708系统安装/</id>
    <published>2018-03-15T14:41:16.000Z</published>
    <updated>2018-03-19T15:49:29.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="VMware12-pro-安装-centos7-4"><a href="#VMware12-pro-安装-centos7-4" class="headerlink" title="VMware12 pro  安装 centos7.4"></a>VMware12 pro  安装 centos7.4</h3><ul><li>下载centos7.4 地址：<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1708.iso" target="_blank" rel="noopener">http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1708.iso</a></li></ul><h3 id="1创建新的虚拟机"><a href="#1创建新的虚拟机" class="headerlink" title="1创建新的虚拟机"></a>1创建新的虚拟机</h3><h4 id="创建新的虚拟机-gt-典型推荐-gt-下一步-gt-稍后安装操作系统-gt-下一步"><a href="#创建新的虚拟机-gt-典型推荐-gt-下一步-gt-稍后安装操作系统-gt-下一步" class="headerlink" title="创建新的虚拟机-&gt;典型推荐-&gt;下一步-&gt;稍后安装操作系统-&gt;下一步"></a>创建新的虚拟机-&gt;典型推荐-&gt;下一步-&gt;稍后安装操作系统-&gt;下一步</h4><p><img src="http://githubimg.lushunde.com/img1.jpg" alt=""></p><h4 id="选择linux的centos-64位-gt-下一步"><a href="#选择linux的centos-64位-gt-下一步" class="headerlink" title="选择linux的centos 64位-&gt;下一步"></a>选择linux的centos 64位-&gt;下一步</h4><p><img src="http://githubimg.lushunde.com/img2.jpg" alt=""></p><h4 id="修改存储系统位置和名称"><a href="#修改存储系统位置和名称" class="headerlink" title="修改存储系统位置和名称"></a>修改存储系统位置和名称</h4><p><img src="http://githubimg.lushunde.com/img3.jpg" alt=""></p><h4 id="空的操作系统创建完成。"><a href="#空的操作系统创建完成。" class="headerlink" title="空的操作系统创建完成。"></a>空的操作系统创建完成。</h4><p><img src="http://githubimg.lushunde.com/img4.jpg" alt=""></p><h3 id="1-2修改虚拟机配置，添加iso位置"><a href="#1-2修改虚拟机配置，添加iso位置" class="headerlink" title="1.2修改虚拟机配置，添加iso位置"></a>1.2修改虚拟机配置，添加iso位置</h3><h4 id="编辑虚拟机位置"><a href="#编辑虚拟机位置" class="headerlink" title="编辑虚拟机位置"></a>编辑虚拟机位置</h4><p><img src="http://githubimg.lushunde.com/img5.jpg" alt=""></p><h3 id="2-安装centos7-4系统"><a href="#2-安装centos7-4系统" class="headerlink" title="2.安装centos7.4系统"></a>2.安装centos7.4系统</h3><h4 id="2-1-开启虚拟机进入安装，我们使用第二项先测试在安装系统"><a href="#2-1-开启虚拟机进入安装，我们使用第二项先测试在安装系统" class="headerlink" title="2.1 开启虚拟机进入安装，我们使用第二项先测试在安装系统"></a>2.1 开启虚拟机进入安装，我们使用第二项先测试在安装系统</h4><p><img src="http://githubimg.lushunde.com/img6.jpg" alt=""></p><h4 id="2-2-选择系统安装语言，一般选择Eeglish，省的以后有中文问题。选择continue"><a href="#2-2-选择系统安装语言，一般选择Eeglish，省的以后有中文问题。选择continue" class="headerlink" title="2.2 选择系统安装语言，一般选择Eeglish，省的以后有中文问题。选择continue"></a>2.2 选择系统安装语言，一般选择Eeglish，省的以后有中文问题。选择continue</h4><p><img src="http://githubimg.lushunde.com/img7.jpg" alt=""></p><h4 id="2-3-设置系统配置"><a href="#2-3-设置系统配置" class="headerlink" title="2.3 设置系统配置"></a>2.3 设置系统配置</h4><h5 id="2-3-1-设置时间"><a href="#2-3-1-设置时间" class="headerlink" title="2.3.1 设置时间"></a>2.3.1 设置时间</h5><p><img src="http://githubimg.lushunde.com/img8.jpg" alt=""></p><h5 id="2-3-2-设置磁盘"><a href="#2-3-2-设置磁盘" class="headerlink" title="2.3.2 设置磁盘"></a>2.3.2 设置磁盘</h5><p><img src="http://githubimg.lushunde.com/img9.jpg" alt=""></p><h5 id="2-3-3-总体显示"><a href="#2-3-3-总体显示" class="headerlink" title="2.3.3 总体显示"></a>2.3.3 总体显示</h5><p><img src="http://githubimg.lushunde.com/img10.jpg" alt=""></p><h3 id="2-4-开始安装"><a href="#2-4-开始安装" class="headerlink" title="2.4 开始安装"></a>2.4 开始安装</h3><p><img src="http://githubimg.lushunde.com/img11.jpg" alt=""></p><h4 id="2-4-1设置root密码，必选-密码简短会提醒，done两次就强制使用。"><a href="#2-4-1设置root密码，必选-密码简短会提醒，done两次就强制使用。" class="headerlink" title="2.4.1设置root密码，必选  密码简短会提醒，done两次就强制使用。"></a>2.4.1设置root密码，必选  密码简短会提醒，done两次就强制使用。</h4><p><img src="http://githubimg.lushunde.com/img12.jpg" alt=""></p><h4 id="2-4-2安装完成，reboot"><a href="#2-4-2安装完成，reboot" class="headerlink" title="2.4.2安装完成，reboot"></a>2.4.2安装完成，reboot</h4><p><img src="http://githubimg.lushunde.com/img13.jpg" alt=""></p><h4 id="2-5-启动系统"><a href="#2-5-启动系统" class="headerlink" title="2.5 启动系统"></a>2.5 启动系统</h4><p><img src="http://githubimg.lushunde.com/img14.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装系统&quot;&gt;&lt;a href=&quot;#安装系统&quot; class=&quot;headerlink&quot; title=&quot;安装系统&quot;&gt;&lt;/a&gt;安装系统&lt;/h2&gt;&lt;h3 id=&quot;VMware12-pro-安装-centos7-4&quot;&gt;&lt;a href=&quot;#VMware12-pro-安装-cent
      
    
    </summary>
    
      <category term="linux" scheme="http://github.lushunde.com/categories/linux/"/>
    
    
      <category term="centos7.4" scheme="http://github.lushunde.com/tags/centos7-4/"/>
    
  </entry>
  
  <entry>
    <title>Github+hexo搭建自己的博客（一）</title>
    <link href="http://github.lushunde.com/2018/01/24/github-hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://github.lushunde.com/2018/01/24/github-hexo搭建自己的博客/</id>
    <published>2018-01-23T16:07:44.000Z</published>
    <updated>2018-03-17T18:05:15.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next主题文档地址：官方文档"><a href="#Next主题文档地址：官方文档" class="headerlink" title="Next主题文档地址：官方文档"></a>Next主题文档地址：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">官方文档</a></h1><hr><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="1-github官网申请自己的账户"><a href="#1-github官网申请自己的账户" class="headerlink" title="1.github官网申请自己的账户"></a>1.github官网申请自己的账户</h3><p> :    注意:只能用户名称作为github.io博客的二级域名，我的用户名称 lushunde321，所以我的github博客网址是：lushunde321.github.io</p><h3 id="2-nodejs-本地安装完成，下载地址：https-nodejs-org-dist-v8-9-4-node-v8-9-4-x64-msi"><a href="#2-nodejs-本地安装完成，下载地址：https-nodejs-org-dist-v8-9-4-node-v8-9-4-x64-msi" class="headerlink" title="2.nodejs 本地安装完成，下载地址：https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi"></a>2.nodejs 本地安装完成，下载地址：<a href="https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi</a></h3><p> :    安装时点击下一步，不用选择其他配置即可。用户根据自己需要进行选择</p><h3 id="3-安装Git-下载地址：https-pan-baidu-com-s-1racDcfE"><a href="#3-安装Git-下载地址：https-pan-baidu-com-s-1racDcfE" class="headerlink" title="3.安装Git 下载地址：https://pan.baidu.com/s/1racDcfE"></a>3.安装Git 下载地址：<a href="https://pan.baidu.com/s/1racDcfE" target="_blank" rel="noopener">https://pan.baidu.com/s/1racDcfE</a></h3><p>: 安装时点击下一步，不用选择其他配置即可。也可以根据自己需求进行选择</p><h3 id="4-剩下的所有操作全部在Git安装后右键的-Git-Bash-Here-中操作。"><a href="#4-剩下的所有操作全部在Git安装后右键的-Git-Bash-Here-中操作。" class="headerlink" title="4.剩下的所有操作全部在Git安装后右键的 Git Bash Here 中操作。"></a>4.剩下的所有操作全部在Git安装后右键的 Git Bash Here 中操作。</h3><p>: Git Bash 其实是liunx界面的cmd，可以直接使用git的命令。</p><h2 id="GitHub上创建自己博客同名的repositories"><a href="#GitHub上创建自己博客同名的repositories" class="headerlink" title="GitHub上创建自己博客同名的repositories"></a>GitHub上创建自己博客同名的repositories</h2><h3 id="github创建同名博客仓库"><a href="#github创建同名博客仓库" class="headerlink" title="github创建同名博客仓库"></a>github创建同名博客仓库</h3><p>登录到自己的github上，选择 new repositories -&gt;创建 lushunde321 如图：<br><img src="http://img.blog.csdn.net/20180122212022673?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhb3l1MTk5MTAzMjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>我的github用户是lushunde321，所以我只能创建 lushunde321.github.io ，这里是github默认同名的才会被github page 创建blog。<br>直接点击cheated repoisitory ,弹出如下页面，表示已经创建成功。</p><h3 id="设置Git连接GitHub的基本设置"><a href="#设置Git连接GitHub的基本设置" class="headerlink" title="设置Git连接GitHub的基本设置"></a>设置Git连接GitHub的基本设置</h3><h4 id="全局配置切换到淘宝源"><a href="#全局配置切换到淘宝源" class="headerlink" title="全局配置切换到淘宝源"></a><strong>全局配置切换到淘宝源</strong></h4><blockquote><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br><figure class="highlight plain"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="设置全局配置user-name-和user-email"><a href="#设置全局配置user-name-和user-email" class="headerlink" title="设置全局配置user.name 和user.email"></a><strong>设置全局配置user.name 和user.email</strong></h4><blockquote><p>git config –global user.name “lushunde321”<br>git config –global user.email “lushunde321@163.com”<br><figure class="highlight plain"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### 展示效果</span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 ~/Desktop</span><br><span class="line">$ git config --global user.name &quot;lushunde321&quot;</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 ~/Desktop</span><br><span class="line">$ git config --global user.email &quot;lushunde321@163.com&quot;</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 ~/Desktop</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="生成SSH密钥设置到Github-需先设置user-name和user-email"><a href="#生成SSH密钥设置到Github-需先设置user-name和user-email" class="headerlink" title="生成SSH密钥设置到Github(需先设置user.name和user.email)"></a><strong>生成SSH密钥设置到Github(需先设置user.name和user.email)</strong></h3><blockquote><p>cd ~/.ssh<br>ssh-keygen -t rsa -C “lushunde321@163.com”<br><figure class="highlight plain"><figcaption><span>Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#### 展示效果</span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 ~/.ssh</span><br><span class="line">$ cd ~/.ssh</span><br><span class="line">bash: cd: /c/Users/Lu/.ssh: No such file or directory</span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 ~/.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;lushunde321@163.com&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/Lu/.ssh/id_rsa):</span><br><span class="line">Created directory &apos;/c/Users/Lu/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/Lu/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/Lu/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:Ih5glTLSLXZMdKCFOQ0xe6hk/czngRQbgjd2oA8zymk lushunde321@163.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| .=&amp;B=.          |</span><br><span class="line">|..%@Bo+          |</span><br><span class="line">| XOB+o           |</span><br><span class="line">|=o*o= .          |</span><br><span class="line">|oE .o=.oS        |</span><br><span class="line">|.  . oo..        |</span><br><span class="line">|    .  .         |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 ~/.ssh</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="设置ssh-key到GitHub"><a href="#设置ssh-key到GitHub" class="headerlink" title="设置ssh key到GitHub"></a><strong>设置ssh key到GitHub</strong></h3><p>默认生成ssh key在C:\Users\username.ssh文件夹中，复制 id_rsa.pub文件到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh key 如图<br><img src="http://img.blog.csdn.net/20180122221129981?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhb3l1MTk5MTAzMjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180122221142518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhb3l1MTk5MTAzMjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="ssh设置是否成功测试"><a href="#ssh设置是否成功测试" class="headerlink" title="ssh设置是否成功测试"></a>ssh设置是否成功测试</h3><blockquote><p>ssh -T git@github.com</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ ssh -T git@github.com#测试ssh连接</span><br><span class="line">The authenticity of host &apos;github.com (192.30.255.113)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes#第一次测试，yes即可</span><br><span class="line">Warning: Permanently added &apos;github.com,192.30.255.113&apos; (RSA) to the list of known hosts.</span><br><span class="line">Hi lushunde321! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ ssh -T git@github.com#第二次ssh测试</span><br><span class="line">Hi lushunde321! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="基本设置完成。"><a href="#基本设置完成。" class="headerlink" title="基本设置完成。"></a>基本设置完成。</h3><h2 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h2><p>使用git shell,依次输入以下代码命令：</p><blockquote><p>cd /        #进入根目录，实际上是git安装的根目录<br>npm install hexo-cli -g            #安装hexo，阿里云源  大概10s安装</p></blockquote><figure class="highlight plain"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 ~/.ssh</span><br><span class="line">$ cd /#进入根目录，实际上是git安装的根目录 </span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /</span><br><span class="line">$ pwd#查看当前文件位置</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /</span><br><span class="line">$ npm install hexo-cli -g#安装hexo，阿里云源大概10s安装</span><br><span class="line">C:\Users\Lu\AppData\Roaming\npm\hexo -&gt; C:\Users\Lu\AppData\Roaming\npm\node_modules\hexo-cli\bin\hexo</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\hexo-cli\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-cli@1.0.4</span><br><span class="line">updated 1 package in 12.329s#完成安装</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /</span><br></pre></td></tr></table></figure><h3 id="初始化项目所需插件"><a href="#初始化项目所需插件" class="headerlink" title="初始化项目所需插件"></a>初始化项目所需插件</h3><blockquote><p>cd /<br>hexo init Hexo<br>cd /Hexo<br>npm instal<br>hexo generate（可简写为hexo g）<br>hexo sever（可简写为hexo s）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /</span><br><span class="line">$ cd /#进入git主目录</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /</span><br><span class="line">$ hexo init Hexo#初始化hexo插件</span><br><span class="line">INFO  Cloning hexo-starter to D:\Git\Hexo</span><br><span class="line">Cloning into &apos;D:\Git\Hexo&apos;...</span><br><span class="line">remote: Counting objects: 62, done.</span><br><span class="line">remote: Total 62 (delta 0), reused 0 (delta 0), pack-reused 62</span><br><span class="line">Unpacking objects: 100% (62/62), done.</span><br><span class="line">Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;</span><br><span class="line">Cloning into &apos;D:/Git/Hexo/themes/landscape&apos;...</span><br><span class="line">remote: Counting objects: 794, done.</span><br><span class="line">remote: Total 794 (delta 0), reused 0 (delta 0), pack-reused 793</span><br><span class="line">Receiving objects: 100% (794/794), 2.53 MiB | 272.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (415/415), done.</span><br><span class="line">Submodule path &apos;themes/landscape&apos;: checked out &apos;73a23c51f8487cfcd7c6deec96ccc7543960d350&apos;</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">▒▒Ϣ: ▒▒▒ṩ▒▒ģʽ▒޷▒▒ҵ▒▒ļ▒▒▒</span><br><span class="line">npm WARN deprecated swig@1.4.2: This package is no longer maintained</span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">added 315 packages in 19.401s</span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /</span><br><span class="line">$ cd Hexo/#进入Hexo文件夹</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ pwd</span><br><span class="line">/Hexo</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ npm install#安装npm插件</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">up to date in 3.626s</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ hexo generate#hexo插件的命令，编译</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 188 ms</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: fancybox/blank.gif</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.css</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.pack.js</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.js</span><br><span class="line">INFO  Generated: fancybox/fancybox_overlay.png</span><br><span class="line">INFO  Generated: fancybox/fancybox_loading.gif</span><br><span class="line">INFO  Generated: fancybox/fancybox_loading@2x.gif</span><br><span class="line">INFO  Generated: archives/2018/index.html</span><br><span class="line">INFO  Generated: fancybox/fancybox_sprite@2x.png</span><br><span class="line">INFO  Generated: fancybox/fancybox_sprite.png</span><br><span class="line">INFO  Generated: archives/2018/01/index.html</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.css</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-media.js</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.js</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.css</span><br><span class="line">INFO  Generated: fancybox/helpers/fancybox_buttons.png</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  Generated: 2018/01/22/hello-world/index.html</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  28 files generated in 434 ms</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ hexo server#hexo插件，启动本地服务，本地网址已经给出</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><h3 id="本地搭建hexo博客插件完成。展示如图"><a href="#本地搭建hexo博客插件完成。展示如图" class="headerlink" title="本地搭建hexo博客插件完成。展示如图"></a>本地搭建hexo博客插件完成。展示如图</h3><p><img src="http://img.blog.csdn.net/20180122223329462?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhb3l1MTk5MTAzMjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="上传hexo博客的静态文档到GitHub"><a href="#上传hexo博客的静态文档到GitHub" class="headerlink" title="上传hexo博客的静态文档到GitHub"></a>上传hexo博客的静态文档到GitHub</h2><h3 id="查看hexo插件的版本"><a href="#查看hexo插件的版本" class="headerlink" title="查看hexo插件的版本"></a>查看hexo插件的版本</h3><blockquote><p>hexo -V</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ hexo -V</span><br><span class="line">hexo: 3.4.4</span><br><span class="line">hexo-cli: 1.0.4</span><br><span class="line">os: Windows_NT 10.0.14393 win32 x64</span><br><span class="line">http_parser: 2.7.0</span><br><span class="line">node: 8.9.4</span><br><span class="line">v8: 6.1.534.50</span><br><span class="line">uv: 1.15.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">modules: 57</span><br><span class="line">nghttp2: 1.25.0</span><br><span class="line">openssl: 1.0.2n</span><br><span class="line">icu: 59.1</span><br><span class="line">unicode: 9.0</span><br><span class="line">cldr: 31.0.1</span><br><span class="line">tz: 2017b</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br></pre></td></tr></table></figure><h4 id="大于hexo-3-0的上传到github的方法："><a href="#大于hexo-3-0的上传到github的方法：" class="headerlink" title="大于hexo 3.0的上传到github的方法："></a><strong>大于hexo 3.0的上传到github的方法：</strong></h4><p>安装部署到github插件依赖</p><blockquote><p>npm install –save hexo-deployer-git</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ npm install --save hexo-deployer-git#安装命令</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-deployer-git@0.3.1</span><br><span class="line">added 16 packages in 6.348s</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br></pre></td></tr></table></figure><h4 id="设置-config-yml的属性"><a href="#设置-config-yml的属性" class="headerlink" title="设置_config.yml的属性"></a><strong>设置_config.yml的属性</strong></h4><blockquote><p>deploy:<br>  type: git<br>  repo: git@github.com:lushunde321/lushunde321.github.io.git<br>  branch: master</p></blockquote><h4 id="gitbash部署hexo到github"><a href="#gitbash部署hexo到github" class="headerlink" title="gitbash部署hexo到github"></a>gitbash部署hexo到github</h4><blockquote><p>hexo deploy</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">成功样例：</span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$ hexo deploy</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in D:/Git/Hexo/.deploy_git/.git/</span><br><span class="line">[master (root-commit) 787e708] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: LF will be replaced by CRLF in 2018/01/22/hello-world/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2018/01/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2018/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in css/style.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-media.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-thumbs.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-thumbs.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.pack.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in js/script.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">[master ab9a29a] Site updated: 2018-01-22 23:07:06</span><br><span class="line"> 29 files changed, 5772 insertions(+)</span><br><span class="line"> create mode 100644 2018/01/22/hello-world/index.html</span><br><span class="line"> create mode 100644 archives/2018/01/index.html</span><br><span class="line"> create mode 100644 archives/2018/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/fonts/FontAwesome.otf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.eot</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.svg</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.ttf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff</span><br><span class="line"> create mode 100644 css/images/banner.jpg</span><br><span class="line"> create mode 100644 css/style.css</span><br><span class="line"> create mode 100644 fancybox/blank.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_loading.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_loading@2x.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_overlay.png</span><br><span class="line"> create mode 100644 fancybox/fancybox_sprite.png</span><br><span class="line"> create mode 100644 fancybox/fancybox_sprite@2x.png</span><br><span class="line"> create mode 100644 fancybox/helpers/fancybox_buttons.png</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-media.js</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.js</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.pack.js</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/script.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">Branch master set up to track remote branch master from git@github.com:lushunde321/lushunde321.github.io.git.</span><br><span class="line">To github.com:lushunde321/lushunde321.github.io.git</span><br><span class="line"> + 689b2e1...ab9a29a HEAD -&gt; master (forced update)</span><br><span class="line">INFO  Deploy done: git</span><br><span class="line"></span><br><span class="line">Lu@DESKTOP-GBTEDDT MINGW64 /Hexo</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h2><p>查看github查看自己的  repository 中上传的文件，10分钟左右之后 访问lushunde321.github.io ，如图<br><img src="http://img.blog.csdn.net/20180122231709859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhb3l1MTk5MTAzMjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Next主题文档地址：官方文档&quot;&gt;&lt;a href=&quot;#Next主题文档地址：官方文档&quot; class=&quot;headerlink&quot; title=&quot;Next主题文档地址：官方文档&quot;&gt;&lt;/a&gt;Next主题文档地址：&lt;a href=&quot;http://theme-next.iis
      
    
    </summary>
    
      <category term="github" scheme="http://github.lushunde.com/categories/github/"/>
    
    
      <category term="hexo" scheme="http://github.lushunde.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 的基础使用命令（〇）</title>
    <link href="http://github.lushunde.com/2018/01/20/hexo%20help/"/>
    <id>http://github.lushunde.com/2018/01/20/hexo help/</id>
    <published>2018-01-20T15:22:39.000Z</published>
    <updated>2018-05-10T15:03:34.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo官方文档地址：官方文档"><a href="#Hexo官方文档地址：官方文档" class="headerlink" title="Hexo官方文档地址：官方文档"></a>Hexo官方文档地址：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a></h1><hr><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-创建新文件"><a href="#Create-a-new-post-创建新文件" class="headerlink" title="Create a new post 创建新文件"></a>Create a new post 创建新文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Generate-static-files-编译文件"><a href="#Generate-static-files-编译文件" class="headerlink" title="Generate static files 编译文件"></a>Generate static files 编译文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Run-server-运行编译后的网站"><a href="#Run-server-运行编译后的网站" class="headerlink" title="Run server 运行编译后的网站"></a>Run server 运行编译后的网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Deploy-to-remote-sites-部署到线上"><a href="#Deploy-to-remote-sites-部署到线上" class="headerlink" title="Deploy to remote sites 部署到线上"></a>Deploy to remote sites 部署到线上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="clean-清除缓存文件"><a href="#clean-清除缓存文件" class="headerlink" title="clean 清除缓存文件"></a>clean 清除缓存文件</h3><pre><code class="bash">$ hexo clean</code></pre><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><pre><code class="bash">$ hexo list &lt;<span class="built_in">type</span>&gt;</code></pre><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><pre><code class="bash">$ hexo version</code></pre><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><pre><code class="bash">$ hexo --safe</code></pre><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><pre><code class="bash">$ hexo --debug</code></pre><p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><pre><code class="bash">$ hexo --silent</code></pre><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><pre><code class="bash">$ hexo --config custom.yml</code></pre><p>自定义配置文件的路径，执行后将不再使用 _config.yml。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><pre><code class="bash">$ hexo --draft</code></pre><p>显示 source/_drafts 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><pre><code class="bash">$ hexo --cwd /path/to/cwd</code></pre><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo官方文档地址：官方文档&quot;&gt;&lt;a href=&quot;#Hexo官方文档地址：官方文档&quot; class=&quot;headerlink&quot; title=&quot;Hexo官方文档地址：官方文档&quot;&gt;&lt;/a&gt;Hexo官方文档地址：&lt;a href=&quot;https://hexo.io/zh-cn
      
    
    </summary>
    
      <category term="github" scheme="http://github.lushunde.com/categories/github/"/>
    
    
      <category term="hexo" scheme="http://github.lushunde.com/tags/hexo/"/>
    
  </entry>
  
</feed>
